(function() {
    'use strict';

    angular
        .module('notosplus', [
            //shared modules
            'notosplus.core',
            'notosplus.widgets',
            'notosplus.auth',
            'notosplus.data',
            'notosplus.layout',

            //app modules
            'notosplus.dashboard',
            'notosplus.manage',
            'notosplus.library',
            'notosplus.curricula',
            'notosplus.tags',
            'notosplus.portal'
        ]);
})();

angular
    .module('notosplus.core', [
        //Angular
        'ngAnimate', 'ngSanitize', 'ngResource',

        //3rd party
        'ui.bootstrap',
        'ncy-angular-breadcrumb',
        'breeze.angular',   // tells breeze to use $q instead of Q.js
        'breeze.directives',// breeze validation directive (zValidate),
        'ngzWip',
        'ngplus',
        'restangular',
        'checklist-model',
        'ngTagsInput',

        //cross app modules
        'blocks.exception',
        'blocks.logger',
        'blocks.router'
    ]);
(function () {
    'use strict';

    angular
        .module('notosplus.data', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.auth', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.curricula', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.dashboard', [

        ]);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.library', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.manage', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.portal', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.tags', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.widgets', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.layout', []);
})();
(function () {
    'use strict';

    angular
        .module('blocks.exception', ['blocks.logger']);
})();
(function () {
    'use strict';

    angular
        .module('blocks.logger', []);
})();
(function () {
    'use strict';

    angular
        .module('blocks.router', [
            'ui.router'
        ]);
})();
/**
 * notosplus.core
 * FACTORY: bootstrap.dialog
 */

(function () {
    'use strict';

    angular
        .module('notosplus.core')
        .factory('Dialog', modalDialog);

    /* @ngInject */
    function modalDialog($modal, $templateCache) {
        var service = {
            deleteDialog: deleteDialog,
            confirmationDialog: confirmationDialog,
            resetPasswordDialog: resetPasswordDialog
        };

        registerModelDialog($templateCache);
        registerResetPasswordDialog($templateCache);

        return service;
        ////////////////

        function deleteDialog(itemName) {
            var title = 'Ben je zeker?';
            itemName = itemName || 'item';
            var msg = 'Verwijder ' + itemName + '?';

            return confirmationDialog(title, msg);
        }

        function confirmationDialog(title, msg, okText, cancelText) {
            var modalOptions = {
                templateUrl: 'modalDialog.tpl.html',
                controller: ModalInstance,
                keyboard: true,
                resolve: {
                    options: function () {
                        return {
                            title: title,
                            message: msg,
                            okText: okText,
                            cancelText: cancelText,
                            password: '',
                            confirmPassword: ''
                        };
                    }
                }
            };

            return $modal.open(modalOptions).result;
        }

        function resetPasswordDialog(title, msg, okText, cancelText) {
            var modalOptions = {
                templateUrl: 'resetPasswordDialog.tpl.html',
                controller: ResetPasswordModalInstance,
                keyboard: true,
                resolve: {
                    options: function () {
                        return {
                            title: title,
                            message: msg,
                            okText: okText,
                            cancelText: cancelText,
                            password: '',
                            confirmPassword: ''
                        };
                    }
                }
            };

            return $modal.open(modalOptions).result;
        }


    }
    modalDialog.$inject = ["$modal", "$templateCache"];

    /* @ngInject */
    function ModalInstance($scope, $modalInstance, options) {
        $scope.title = options.title || 'Titel';
        $scope.message = options.message || '';
        $scope.okText = options.okText || 'Ok';
        $scope.cancelText = options.cancelText || 'Annuleren';
        $scope.ok = function () {
            $modalInstance.close('ok');
        };
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }
    ModalInstance.$inject = ["$scope", "$modalInstance", "options"];

    /* @ngInject */
    function ResetPasswordModalInstance($scope, $modalInstance, options) {
        $scope.title = options.title || 'Paswoord opnieuw instellen';
        $scope.message = options.message || 'Geef het nieuwe paswoord in.';
        $scope.okText = options.okText || 'Wijzig';
        $scope.cancelText = options.cancelText || 'Annuleren';
        $scope.password = '';
        $scope.confirmPassword = '';
        $scope.ok = function () {
            $modalInstance.close({password: $scope.password});
        };
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }
    ResetPasswordModalInstance.$inject = ["$scope", "$modalInstance", "options"];

    function registerModelDialog($templateCache) {
        $templateCache.put('modalDialog.tpl.html',
            '<div>' +
            '    <div class="modal-header">' +
            '        <button type="button" class="close" data-dismiss="modal" ' +
            '            aria-hidden="true" data-ng-click="cancel()">&times;</button>' +
            '        <h3>{{title}}</h3>' +
            '    </div>' +
            '    <div class="modal-body">' +
            '        <p>{{message}}</p>' +
            '    </div>' +
            '    <div class="modal-footer">' +
            '        <button class="btn btn-primary" data-ng-click="ok()">{{okText}}</button>' +
            '        <button class="btn btn-info" data-ng-click="cancel()">{{cancelText}}</button>' +
            '    </div>' +
            '</div>');
    }

    function registerResetPasswordDialog($templateCache) {
        $templateCache.put('resetPasswordDialog.tpl.html',
            '<div>' +
            '    <div class="modal-header">' +
            '        <button type="button" class="close" data-dismiss="modal" ' +
            '            aria-hidden="true" data-ng-click="cancel()">&times;</button>' +
            '        <h3>{{title}}</h3>' +
            '    </div>' +
            '    <div class="modal-body">' +
            '        <p>{{message}}</p>' +
            '        <div class="form-group">' +
            '           <label class="control-label">Paswoord</label>' +
            '           <input type="password" data-ng-model="password" placeholder="Nieuw paswoord" class="form-control">' +
            '        </div>' +
            '        <div class="form-group">' +
            '           <label class="control-label">Herhaal password</label>' +
            '           <input type="password" data-ng-model="confirmPassword" placeholder="Herhaal paswoord" class="form-control">' +
            '        </div>' +
            '        <div class="form-group">' +
            '           <span class="text-danger" data-ng-show="password !== confirmPassword && password !== \'\'">De paswoorden komen niet overeen.</span>' +
            '        </div>' +
            '    </div>' +
            '    <div class="modal-footer">' +
            '        <button class="btn btn-primary" data-ng-click="ok()" data-ng-disabled="password !== confirmPassword || password === \'\'">{{okText}}</button>' +
            '        <button class="btn btn-info" data-ng-click="cancel()">{{cancelText}}</button>' +
            '    </div>' +
            '</div>');
    }
})();
/**
 * notosplus.core
 * FACTORY: common
 */

(function () {
    'use strict';

    angular
        .module('notosplus.core')
        .factory('common', common);

    function common($q, $rootScope, $timeout, logger) {
        var throttles = {};

        var service = {
            // common angular dependencies
            $broadcast: $broadcast,
            $q: $q,
            $timeout: $timeout,
            // generic
            isNumber: isNumber,
            debouncedThrottle: debouncedThrottle,
            logger: logger,
            textContains: textContains
        }

        return service;
        ////////////////////////

        function $broadcast() {
            return $rootScope.$broadcast.apply($rootScope, arguments);
        }


        function debouncedThrottle(key, callback, delay, immediate) {
            // Perform some action (callback) after a delay.
            // Track the callback by key, so if the same callback
            // is issued again, restart the delay.
            var defaultDelay = 1000;
            delay = delay || defaultDelay;
            if (throttles[key]) {
                $timeout.cancel(throttles[key]);
                throttles[key] = undefined;
            }
            if (immediate) {
                callback();
            } else {
                throttles[key] = $timeout(callback, delay);
            }
        }

        function isNumber(val) {
            // negative or positive
            return (/^[-]?\d+$/).test(val);
        }

        function textContains(text, searchText) {
            return text && -1 !== text.toLowerCase().indexOf(searchText.toLowerCase());
        }
    }
    common.$inject = ["$q", "$rootScope", "$timeout", "logger"];
})();
/**
 * notosplus.data
 * FACTORY: breezeConfig
 */

(function () {
    'use strict';

    angular
        .module('notosplus.core')
        .factory('breezeConfig', breezeConfig);

    /* @ngInject */
    function breezeConfig(breeze) {
        var service = {
            remoteServiceName: '/api/breeze',
            breeze: breeze
        }

        return service;
        ////////////////
    }
    breezeConfig.$inject = ["breeze"];

})();
(function () {
    'use strict';

    var core = angular.module('notosplus.core');

    core.config(toastrConfig);

    /* @ngInject */
    function toastrConfig(toastr) {
        toastr.options.timeOut = 4000;
        toastr.options.closeButton = true;
        toastr.options.progressBar = true;
        toastr.options.positionClass = 'toast-bottom-right';
    }
    toastrConfig.$inject = ["toastr"];

    var keyCodes = {
        backspace: 8,
        tab: 9,
        enter: 13,
        esc: 27,
        space: 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        insert: 45,
        del: 46
    };

    var events = {
        controllerActivateSuccess: 'controller.activateSuccess',
        entitiesChanged: 'datacontext.entitiesChanged',
        entitiesImported: 'datacontext.entitiesImported',
        hasChangesChanged: 'datacontext.hasChangesChanged',
        storage: {
            error: 'store.error',
            storeChanged: 'store.changed',
            wipChanged: 'wip.changed'
        },
        loggedInOrganizationChanged: 'profile.loggedInAtChanged'
    };


    var config = {
        appErrorPrefix: '[noTos+ Fout] ',
        appTitle: 'noTos+',
        keyCodes: keyCodes,
        version: '1.0.0',
        events: events
    };

    core.value('config', config);

    core.config(configure);

    /* @ngInject */
    function configure($urlRouterProvider, $stateProvider,
                       routehelperConfigProvider, $breadcrumbProvider,
                       zStorageConfigProvider, zDirectivesConfigProvider,
                       RestangularProvider) {

        configureRouting();
        configureBreadcrumb();

        configureZStorage();
        configureZValidate();

        configureRestangular();


        function configureRouting() {
            routehelperConfigProvider.config.$urlRouterProvider = $urlRouterProvider;
            routehelperConfigProvider.config.$stateProvider = $stateProvider;

            routehelperConfigProvider.config.title = config.appTitle;
        }

        function configureBreadcrumb() {
            $breadcrumbProvider.setOptions({
                prefixStateName: 'index',
                template: 'bootstrap3',
                includeAbstract: true
            });
        }

        function configureZStorage() {
            // Setup our Breeze-based offline storage
            zStorageConfigProvider.config = {
                // zStorage
                enabled: false,
                key: 'noTosPlus',
                events: config.events.storage,

                // zStorageWip
                wipKey: 'noTosPlus.wip',
                appErrorPrefix: config.appErrorPrefix,
                newGuid: breeze.core.getUuid,

                // zStorageCore
                version: config.version
            };
        }

        function configureZValidate() {
            zDirectivesConfigProvider.zValidateTemplate =
                '<span class="invalid"><i class="fa fa-warning-sign"></i>' +
                'Onbegrijpelijk! %error%</span>';

        }

        function configureRestangular() {
            var baseUrl = '/api';

            RestangularProvider.setBaseUrl(baseUrl);
        }
    }
    configure.$inject = ["$urlRouterProvider", "$stateProvider", "routehelperConfigProvider", "$breadcrumbProvider", "zStorageConfigProvider", "zDirectivesConfigProvider", "RestangularProvider"];
})();
/* global toastr:false, moment:false */
(function() {
    'use strict';

    angular
        .module('notosplus.core')
        .constant('toastr', toastr)
        .constant('moment', moment)
        .constant('_', window._);
})();
/**
 * notosplus.core
 * FACTORY: Init
 */

(function () {
    'use strict';

    angular
        .module('notosplus.core')
        .factory('Init', Init);

    /* @ngInject */
    function Init() {
        var wasInitialized = false;

        var service = {
            isInitialized: isInitialized,
            initializing: initializing
        }

        return service;
        ////////////////

        function isInitialized() {
            return wasInitialized;
        }
        function initializing(init) {
            wasInitialized = init;
        }

    }
})();
    /**
 * notosplus.core
 * FILTER: Highlight
 */
(function () {
    'use strict';

    angular
        .module('notosplus.data')
        .filter('Highlight', Highlight);

    /**
     *
     */
    function Highlight($sce) {
        return function (str, termsToHighlight) {
            if (termsToHighlight === '') {
                return $sce.trustAsHtml(str);
            }
            // Sort terms by length
            termsToHighlight = termsToHighlight.split(" ");
            termsToHighlight.sort(function (a, b) {
                return b.length - a.length;
            });

            // Regex to simultaneously replace terms
            var regex = new RegExp('(?!<[^>]*?>)' + termsToHighlight.join('|') + '(?![^<]*?</[^>]*?>)', 'gi');
            return $sce.trustAsHtml(str.replace(regex, '<span class="match">$&</span>'));
        };
    }
    Highlight.$inject = ["$sce"];

})();
/**
 * notosplus.data
 * FACTORY: HTTPCache
 */

(function () {
    'use strict';

    angular
        .module('notosplus.data')
        .factory('HTTPCache', HTTPCache);

    /* @ngInject */
    function HTTPCache(Restangular, $cacheFactory) {
        var cache;
        cache = $cacheFactory('http');

        return Restangular.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setDefaultHttpFields({cache: cache});
            RestangularConfigurer.setResponseInterceptor(function (response, operation) {
                if (operation === 'put' || operation === 'post' || operation === 'delete') {
                    cache.removeAll();
                }
                return response;
            });

            // Custom Global Method(s) for Restangularized Elements.
            RestangularConfigurer.setOnElemRestangularized(function(elem, isCollection) {
                elem.clearCache = function() {
                    cache.removeAll();
                }
                return elem;
            });
        });
    }
    HTTPCache.$inject = ["Restangular", "$cacheFactory"];
})();
/**
 * notosplus.auth
 * FACTORY: Profile
 */

(function () {
    'use strict';

    angular
        .module('notosplus.auth')
        .factory('ProfileService', ProfileService);

    /* @ngInject */
    function ProfileService($http, exception, $q, common, config) {
        var cache = null;
        var _realm = null;
        var events = config.events;

        var service = {
            current: current,
            realm: realm,
            setRealm: setRealm
        };

        return service;
        //////////////

        function current(forceRefresh) {
            if (cache && !forceRefresh) {
                //should return promise
                return $q.when(cache);
            }

            return $http.get('/api/user/profile')
                .then(getCurrentComplete)
                .catch(function (message) {
                    exception.catcher('Profiel van de huidige gebruiker opvragen, lukt niet.')(message);
                });


            function getCurrentComplete(response, status, headers, config) {
                cache = response.data;
                service.setRealm(response.data.realm);
                return response.data;
            }

        }

        function realm() {
            return _realm; //synchronous, as async data was here at initialization
        }

        function setRealm(realm) {
            //realm.domain_name= realm.domain_name.replace(/\./g, '_');
            _realm = realm;
            common.$broadcast(events.realmChanged, realm);
        }

    }
    ProfileService.$inject = ["$http", "exception", "$q", "common", "config"];
})();
/**
 * notosplus.curricula
 * FACTORY: Curriculum
 */

(function () {
    'use strict';

    angular
        .module('notosplus.curricula')
        .factory('Curriculum', Curriculum);

    /* @ngInject */
    function Curriculum(HTTPCache) {

        var service= {
            get: get,
            objectives: objectives
        }


        return service;
        //////////////

        function get(course) {
            return HTTPCache.one('/curricula', course);
        }
        function objectives(course) {
            return get(course).getList('objectives');
        }
    }
    Curriculum.$inject = ["HTTPCache"];
})();
/**
 * notosplus.dashboard
 * CONTROLLER: DashboardController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.dashboard')
        .controller('DashboardController', DashboardController);

    /* @ngInject */
    function DashboardController(common, config) {
        /*jshint validthis: true */
        var vm = this;

        var events = config.events;

        activate();
        /////////////

        function activate() {
            common.$broadcast(events.controllerActivateSuccess);
        }
    }
    DashboardController.$inject = ["common", "config"];
})();
/**
 * ROUTES: notosplus.dashboard
 */
(function () {
    'use strict';

    angular
        .module('notosplus.dashboard')
        .run(configRoutes);

    /* @ngInject */
    function configRoutes(routehelper) {
        routehelper.configureStates(getStates());
    }
    configRoutes.$inject = ["routehelper"];;

    function getStates() {
        return [
            {
                state: 'index',
                config: {
                    abstract: true,
                    url: '/index',
                    ncyBreadcrumb: {
                        label: 'start'
                    }
                }
            },
            {
                state: 'index.dashboard',
                config: {
                    url: '/dashboard',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/dashboard/dashboard.html',
                            controller: 'DashboardController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Dashboard'
                }
            }
        ];
    };
})();
/**
 * ROUTES: notosplus.library
 */
(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .run(configRoutes);

    /* @ngInject */
    function configRoutes(routehelper) {
        routehelper.configureStates(getStates());
    }
    configRoutes.$inject = ["routehelper"];;

    function getStates() {
        return [
            {
                state: 'library',
                config: {
                    abstract: true,
                    url: '/library'
                }
            },
            {
                state: 'library.books',
                config: {
                    url: '/books',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/library/books/books.html',
                            controller: 'BooksController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Boeken'
                }
            },
            {
                state: 'library.websites',
                config: {
                    url: '/websites',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/library/websites/websites.html',
                            controller: 'WebsitesController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Websites'
                }
            },
            {
                state: 'library.websites.detail',
                config: {
                    url: '/:id',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/library/websites/websitedetail.html',
                            controller: 'WebsiteDetailController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Website bewerken'
                }
            },
            {
                state: 'library.websites.detail.objectives',
                config: {
                    url:'/objectives',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/curricula/objectives/select_objectives.html',
                            controller: 'SelectObjectivesController',
                            controllerAs: 'vm'
                        }
                    }
                },
                title: 'Doelen selecteren'
            }
        ];
    };
})();
/**
 * ROUTES: notosplus.manage
 */
(function () {
    'use strict';

    angular
        .module('notosplus.manage')
        .run(configRoutes);

    /* @ngInject */
    function configRoutes(routehelper) {
        routehelper.configureStates(getStates());
    }
    configRoutes.$inject = ["routehelper"];;

    function getStates() {
        return [
            {
                state: 'manage',
                config: {
                    abstract: true,
                    url: '/manage',
                    title: 'Beheer'
                }
            },
            {
                state: 'manage.users',
                config: {
                    url: '/users',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/manage/users/users.html',
                            controller: 'UsersController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Gebruikers'
                }
            },
            {
                state: 'manage.users.detail',
                config: {
                    url: '/:id',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/manage/users/userdetail.html',
                            controller: 'UserDetailController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Gebruiker bewerken'
                }
            }
        ];
    };
})();
/**
 * ROUTES: notosplus.portal
 */
(function () {
    'use strict';

    angular
        .module('notosplus.portal')
        .run(configRoutes);

    /* @ngInject */
    function configRoutes(routehelper) {
        routehelper.configureStates(getStates());
    }
    configRoutes.$inject = ["routehelper"];;

    function getStates() {
        return [
            {
                state: 'portal',
                config: {
                    abstract: true,
                    url: '/portal'
                },
                title: 'Portaal'
            },
            {
                state: 'portal.blogs',
                config: {
                    url: '/blogs',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/portal/blogs/blogs.html',
                            controller: 'BlogsController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Blogs'
                }
            },
            {
                state: 'portal.blogs.detail',
                config: {
                    url: '/:id',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/portal/blogs/blogdetail.html',
                            controller: 'BlogDetailController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Blog bewerken'
                }
            }
        ];
    };
})();
/**
 * notosplus.tags
 * FACTORY: Tag
 */

(function () {
    'use strict';

    angular
        .module('notosplus.tags')
        .factory('Tag', Tag);

    /* @ngInject */
    function Tag(HTTPCache) {
        var service = HTTPCache.service('tags');

        return service;

    }
    Tag.$inject = ["HTTPCache"];
})();
/**
 * notosplus.layout
 * CONTROLLER: shell
 */
(function () {
    'use strict';

    angular
        .module('notosplus.layout')
        .controller('ShellController', ShellController);

    /* @ngInject */
    function ShellController(Init, $rootScope, config, ProfileService, logger) {
        /*jshint validthis: true */
        var vm = this;

        vm.busyMessage = 'Even geduld...';
        vm.isBusy = true;
        vm.showSplash = false;
        vm.avatar = null;
        vm.profile = {};
        vm.loggedInOrganization = null;

        var events = config.events;

        activate();
        /////////////

        function activate() {

            if (!Init.isInitialized()) {
                vm.showSplash = true;
                Init.initializing(true);
                getProfile().then(function (data) {

                    vm.profile = data;
                    vm.profile.fullName = vm.profile.first_name + ' ' + vm.profile.last_name;
                    //vm.profile.organizations = profile.organizations;

                    vm.avatar =
                        vm.profile.avatar ||
                        (vm.profile.gender === 'F' ? '/img/user/female.png' : '/img/user/male.png') ||
                        '/img/user/male.png';

                    initialized();
                });
            }
        }

        function getProfile() {
            return ProfileService.current().then(function (data) {
                vm.profile = data;
                return vm.profile;
            });
        }

        function toggleSpinner(on) {
            vm.isBusy = on;
        }

        $rootScope.$on('$stateChangeStart',
            function (event, next, current) {
                toggleSpinner(true);
            }
        );

        $rootScope.$on(events.controllerActivateSuccess,
            function (data) {
                toggleSpinner(false);
            }
        );
        $rootScope.$on(events.realmChanged,
            function (scope, realm) {
                vm.realm = realm;
            });

        function initialized() {
            vm.showSplash = false;

            logger.info('Welkom ' + vm.profile.first_name);
        }

    }
    ShellController.$inject = ["Init", "$rootScope", "config", "ProfileService", "logger"];
})();
// Include in index.html so that app level exceptions are handled.
// Exclude from testRunner.html which should run exactly what it wants to run
(function() {
    'use strict';

    angular
        .module('blocks.exception')
        .provider('exceptionHandler', exceptionHandlerProvider)
        .config(config);

    /**
     * Must configure the exception handling
     * @return {[type]}
     */
    function exceptionHandlerProvider() {
        /* jshint validthis:true */
        this.config = {
            appErrorPrefix: undefined
        };

        this.configure = function (appErrorPrefix) {
            this.config.appErrorPrefix = appErrorPrefix;
        };

        this.$get = function() {
            return {config: this.config};
        };
    }

    /**
     * Configure by setting an optional string value for appErrorPrefix.
     * Accessible via config.appErrorPrefix (via config value).
     * @param  {[type]} $provide
     * @return {[type]}
     * @ngInject
     */
    function config($provide) {
        $provide.decorator('$exceptionHandler', extendExceptionHandler);
    }
    config.$inject = ["$provide"];

    /**
     * Extend the $exceptionHandler service to also display a toast.
     * @param  {Object} $delegate
     * @param  {Object} exceptionHandler
     * @param  {Object} logger
     * @return {Function} the decorated $exceptionHandler service
     */
    function extendExceptionHandler($delegate, exceptionHandler, logger) {
        return function(exception, cause) {
            var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';
            var errorData = {exception: exception, cause: cause};
            exception.message = appErrorPrefix + exception.message;
            $delegate(exception, cause);
            /**
             * Could add the error to a service's collection,
             * add errors to $rootScope, log errors to remote web server,
             * or log locally. Or throw hard. It is entirely up to you.
             * throw exception;
             *
             * @example
             *     throw { message: 'error message we added' };
             */
            logger.error(exception.message, errorData);
        };
    }
    extendExceptionHandler.$inject = ["$delegate", "exceptionHandler", "logger"];
})();
/**
 * blocks.exception
 * FACTORY: exception
 */

(function () {
    'use strict';

    angular
        .module('blocks.exception')
        .factory('exception', exception);

    /* @ngInject */
    function exception(logger) {
        var service = {
            catcher: catcher
        };
        return service;

        function catcher(message) {
            return function(reason) {
                logger.error(message, reason);
            };
        }
    }
    exception.$inject = ["logger"];
})();
/**
 * blocks.logger
 * FACTORY: logger
 */

(function () {
    'use strict';

    angular
        .module('blocks.logger')
        .factory('logger', logger);

    logger.$inject = ['$log', 'toastr'];

    function logger($log, toastr) {
        var service = {
            showToasts: true,

            error: error,
            info: info,
            success: success,
            warning: warning,

            removed: removed,
            saved: saved,

            // straight to console; bypass toastr
            log: $log.log
        };

        return service;
        /////////////////////

        function error(message, data, title) {
            toastr.error(message, title);
            $log.error('Fout: ' + message, data);
        }

        function info(message, data, title) {
            toastr.info(message, title);
            $log.info('Info: ' + message, data);
        }

        function success(message, data, title) {
            toastr.success(message, title);
            $log.info('Succes: ' + message, data);
        }

        function warning(message, data, title) {
            toastr.warning(message, title);
            $log.warn('Let op: ' + message, data);
        }

        function removed(message, data, title) {
            toastr.warning(message, title);
            $log.warn('Verwijderd: ' + message, data);
        }

        function saved(message, data, title) {
            toastr.success(message, title);
            $log.info('Bewaard: ' + message, data);
        }
    }
})();
/**
 * notosplus.router
 * FACTORY: routehelper
 */

(function () {
    'use strict';

    angular
        .module('blocks.router')
        .provider('routehelperConfig', routehelperConfig)
        .factory('routehelper', routehelper);

    routehelper.$inject = ['routehelperConfig', '$rootScope', '$state'];

    function routehelperConfig() {
        /* jshint validthis:true */
        this.config = {};

        this.$get = function () {
            return {
                config: this.config
            };
        };
    }

    function routehelper(routehelperConfig, $rootScope, $state) {
        var $urlRouterProvider = routehelperConfig.config.$urlRouterProvider;
        var $stateProvider = routehelperConfig.config.$stateProvider;

        var service = {
            configureStates: configureStates,
            states: states,
            get: get
        };

        init();

        return service;
        //////////////////

        function configureStates(states) {
            states.forEach(function (state) {
                if (state.config.title) {
                    state.config.ncyBreadcrumb = {
                        label: state.config.title.toLowerCase()
                    }
                }

                $stateProvider.state(state.state, state.config);
            });
        }

        function states() {
            return $state.get();
        }

        function get(pattern) {
            var result = null;
            states().forEach(function (state) {
                if (state.name === pattern) {
                    result = state;
                }
            });
            return result;
        }


        function init() {
            updateDocTitle();
            $urlRouterProvider.otherwise('/index/dashboard');
        }

        function updateDocTitle() {
            $rootScope.$on('$stateChangeSuccess',
                function (event, current, previous) {
                    var title = routehelperConfig.config.title + (current.title ? ' | ' + current.title : '');
                    $rootScope.title = title; // data bind to <title>
                    $rootScope.$state = current;
                }
            );
        }

    }
})();
/**
 * notosplus.curricula
 * CONTROLLER: SelectObjectivesController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.curricula')
        .controller('SelectObjectivesController', SelectObjectivesController);

    /* @ngInject */
    function SelectObjectivesController(common, config, WebsiteDraft, Curriculum,
                                        $state, $scope, SearchSiblingsIncludedFilter) {
        /*jshint validthis: true */
        var vm = this;

        vm.objectives = [];
        vm.filtered = [];
        vm.selectedItems = [];
        vm.website = null;

        vm.save = save;
        vm.cancel = cancel;
        vm.compareObjective = compareObjective;

        vm.itemsPerPage = 10;
        vm.currentPage = 1;
        vm.totalItems = 0;

        vm.search = '';

        var events = config.events;

        activate();
        ////////////

        function activate() {
            getItems().then(function () {
                loadDraft();
                common.$broadcast(events.controllerActivateSuccess);
            });

            /*
             * Search functions
             */
            $scope.$watch('vm.search', function (term) {
                if (vm.objectives) {
                    vm.filtered = SearchSiblingsIncludedFilter(vm.objectives, term);
                    vm.totalItems = vm.filtered.length;
                }
            });
        }

        function getItems() {
            return Curriculum.objectives('wiskunde').then(function (data) {
                vm.totalItems = data.length;
                return vm.objectives = vm.filtered = data;
            });
        }

        function loadDraft() {
            vm.website = WebsiteDraft.load();
            if (vm.website && vm.website.objectives) {
                return vm.selectedItems = vm.website.objectives;
            }
        }

        function compareObjective(o1, o2) {
            return o1.id === o2.id;
        }

        function save() {
            vm.website.objectives = vm.selectedItems;
            WebsiteDraft.draft(vm.website);
            gotoWebsite();
        }

        function cancel() {
            gotoWebsite();
        }

        function gotoWebsite() {
            $state.go('library.websites.detail', {id: vm.website.id});
        }
    }
    SelectObjectivesController.$inject = ["common", "config", "WebsiteDraft", "Curriculum", "$state", "$scope", "SearchSiblingsIncludedFilter"];
})();
/**
 * notosplus.data
 * FILTER: SearchSiblingsIncluded
 */
(function () {
    'use strict';

    angular
        .module('notosplus.curricula')
        .filter('SearchSiblingsIncluded', SearchSiblingsIncluded);

    /**
     *
     */
    function SearchSiblingsIncluded() {
        return function (input, searchText) {

            if (searchText === undefined)
           f

            var filtered = [],
                filteredIds = [];
            angular.forEach(input, function (item) {
                var lower_code = angular.lowercase(item.code);
                var lower_name = angular.lowercase(item.name);
                var lower_searchText = angular.lowercase(searchText);

                if (lower_name.indexOf(lower_searchText) > -1 ||
                    lower_code.indexOf(lower_searchText) > -1) {

                    if (item.parent_id) {
                        angular.forEach(input, function (pitem) {
                            if (pitem.id === item.parent_id) {
                                if (filteredIds.indexOf(pitem.id) === -1) {
                                    filtered.push(pitem);
                                    filteredIds.push(pitem.id);
                                }
                            }
                        });
                    }
                    if (filteredIds.indexOf(item.id) === -1) {
                        filtered.push(item);
                        filteredIds.push(item.id);
                    }
                    if (!item.parent_id) {
                        angular.forEach(input, function (chitem) {
                            if (chitem.parent_id === item.id) {
                                if (filteredIds.indexOf(chitem.id) === -1) {
                                    filtered.push(chitem);
                                    filteredIds.push(chitem.id);
                                }
                            }
                        });
                    }

                }
            });
            return filtered;
        }

    }
})();
/**
 * notosplus.library
 * FACTORY: Book
 */

(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .factory('Book', Book);

    /* @ngInject */
    function Book(HTTPCache, ProfileService ) {
        var service = HTTPCache.service('/organization/' + ProfileService.realm().id + '/books');

        return service;

    }
    Book.$inject = ["HTTPCache", "ProfileService"];
})();
/**
 * notosplus.library
 * CONTROLLER: BooksController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .controller('BooksController', BooksController);

    /* @ngInject */
    function BooksController(common, config, Book) {
        /*jshint validthis: true */
        var vm = this;

        vm.books = [];
        vm.filteredBooks = [];
        vm.filter = {
            terms: null
        }

        vm.loading = false;
        vm.refresh = refresh;


        var events = config.events;

        activate();
        ////////////

        function activate() {
            getBooks();
            common.$broadcast(events.controllerActivateSuccess);
        }

        function getBooks(forceRefresh) {
            vm.loading = true;

            if (forceRefresh) {
                if (vm.books) {
                    vm.books.clearCache();
                }
            }
            Book.getList().then(function (data) {
                vm.books = vm.filteredBooks = data;
                vm.loading = false;

                return vm.books;
            });
        }

        function refresh() {
            getBooks(true);
        }
    }
    BooksController.$inject = ["common", "config", "Book"];
})();
/**
 * notosplus.websites
 * FILTER: SearchWebsites
 */
(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .filter('SearchWebsites', SearchWebsites);

    /**
     *
     */
    function SearchWebsites(_) {
        return function(websites, terms) {
            terms = terms.split(' ');
            return _.select(websites, function(website) {
                return _.some(terms, function(t) {
                    return _.contains(website.name.toLowerCase(), t.toLowerCase()) ||
                        _.contains(website.url.toLowerCase(), t.toLowerCase());
                });
            });
        }
    }
    SearchWebsites.$inject = ["_"];
})();
/**
 * notos-plus.library
 * FACTORY: WebsiteDraft
 */

(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .factory('WebsiteDraft', WebsiteDraft);

    /* @ngInject */
    function WebsiteDraft() {
        var website = null;

        var service = {
            draft: draft,
            load: load,
            clear: clear,
            pull: pull
        }

        return service;
        /////////////////

        function draft(website) {
            this.website = website;
        }
        function load() {
            return this.website;
        }
        function clear() {
            this.website = null;
        }
        function pull() {
            var w = this.load();
            this.clear();
            return w;
        }
    }
})();
/**
 * notosplus.library
 * FACTORY: Website
 */

(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .factory('Website', Website);

    /* @ngInject */
    function Website(HTTPCache) {
        var service = HTTPCache.service('/websites');

        return service;
    }
    Website.$inject = ["HTTPCache"];
})();
/**
 * notosplus.library
 * CONTROLLER: WebsiteDetailController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .controller('WebsiteDetailController', WebsiteDetailController);

    /* @ngInject */
    function WebsiteDetailController($state, $stateParams,
                                     common, config, Tag,
                                     Website, Dialog, WebsiteDraft, _) {
        /*jshint validthis: true */
        var vm = this;
        var logger = common.logger;
        var $q = common.$q;
        var events = config.events;

        vm.cancel = cancel;
        vm.hasChanges = false;
        vm.loading = false;
        vm.isSaving = false;
        vm.save = save;
        vm.remove = remove;
        vm.gotoObjectives = gotoObjectives;
        vm.website = null;
        vm.objectives_changed = false;

        vm.tags = [];
        vm.loadTags = loadTags;


        Object.defineProperty(vm, 'canSave', {get: canSave});

        activate();
        ////////////

        function activate() {

            preloadTags();
            getRequestedWebsite();

            common.$broadcast(events.controllerActivateSuccess);
        }

        function preloadTags() {
            return Tag.getList().then(tagsCompleted);

            function tagsCompleted(response) {
                return vm.tags = response;
            }
        }

        function loadTags(query) {
            return _.select(vm.tags, function(t) {
               return _.contains(t.name.toLowerCase(), query.toLowerCase());
            });
        }

        function cancel() {
            gotoWebsites();
        }

        function canSave() {
            return !vm.isSaving;
        }

        function getRequestedWebsite() {
            vm.loading = true;

            if (WebsiteDraft.load()) {
                vm.website = WebsiteDraft.pull();
                vm.objectives_changed = true;
                vm.loading = false;
                return vm.website;
            }

            var val = $stateParams.id;
            if (val === 'new') {
                vm.website = Website.one();
                vm.loading = false;

                return vm.website;
            }


            Website.one(val).get()
                .then(function (data) {
                    if (data) {
                        vm.website = data;

                        vm.loading = false;
                        return vm.website;
                    } else {
                        logger.warning('Could not find website id = ' + val);
                        gotoWebsites();
                    }
                    vm.loading = false;
                })
                .catch(function (error) {
                    logger.error('Error while getting website id= ' + val + '; ' + error);
                    gotoWebsites();
                })
        }

        function gotoWebsites() {
            $state.go('library.websites');
        }

        function save() {
            if (!canSave()) {
                return $q.when(null);
            } // Must return a promise

            vm.isSaving = true;

            return vm.website.save().then(function () {
                vm.isSaving = false;

                gotoWebsites();
            }).catch(function (error) {
                vm.isSaving = false;
                logger.error('Kon website niet opslaan. [' + error + ']');
            });
        }

        function remove() {
            return Dialog.deleteDialog(vm.website.name + ' [' + vm.website.url + ']')
                .then(removeWebsite);

            function removeWebsite() {
                vm.website.remove().then(function () {
                    vm.website.clearCache();
                    logger.warning(vm.website.name + ' werd met succes verwijderd.');
                    gotoWebsites();
                }).catch(function (error) {
                    Dialog.confirmationDialog('Verwijderen mislukt',
                        'Het verwijderen van ' + vm.website.name + ' is mislukt. Probeer het later opnieuw.');
                });
            }
        }

        function gotoObjectives() {
            WebsiteDraft.draft(vm.website);
            $state.go('library.websites.detail.objectives');
        }

    }
    WebsiteDetailController.$inject = ["$state", "$stateParams", "common", "config", "Tag", "Website", "Dialog", "WebsiteDraft", "_"];
})();
/**
 * notosplus.library
 * CONTROLLER: WebsitesController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .controller('WebsitesController', WebsitesController);

    /* @ngInject */
    function WebsitesController(common, config, $state, Website, $scope, SearchWebsitesFilter) {
        /*jshint validthis: true */
        var vm = this;

        vm.websites = [];
        vm.filteredWebsites = [];
        vm.gotoWebsite = gotoWebsite;
        vm.refresh = refresh;

        vm.filter = {
            terms: null
        };

        var events = config.events;

        activate();
        ////////////////
        $scope.$watch('vm.filter', doFilter, true);

        function activate() {
            common.$broadcast(events.controllerActivateSuccess);
            getWebsites();
        }

        function getWebsites(forceRefresh) {
            vm.loading = true;

            if (forceRefresh) {
                if (vm.websites) {
                    vm.websites.clearCache();
                }
            }
            Website.getList().then(function (data) {
                vm.websites = vm.filteredWebsites = data;
                vm.loading = false;
                return vm.websites;
            });
        }

        function gotoWebsite(website) {
            if (website && website.id) {
                $state.go('library.websites.detail', {id: website.id});
            }
        }

        function refresh() {
            getWebsites(true);
        }

        function doFilter() {
            if (vm.filter.terms && vm.filter.terms !== '') {
                vm.filteredWebsites = SearchWebsitesFilter(vm.websites, vm.filter.terms);
            } else {
                vm.filteredWebsites = vm.websites;
            }
        }
    }
    WebsitesController.$inject = ["common", "config", "$state", "Website", "$scope", "SearchWebsitesFilter"];
})();
/**
 * notosplus.manage
 * FACTORY: User
 */

(function () {
    'use strict';

    angular
        .module('notosplus.manage')
        .factory('User', User);


    /* @ngInject */
    function User(HTTPCache, ProfileService) {

        var service = HTTPCache.service('/organization/' + ProfileService.realm().id + '/user');


        return service;
    }
    User.$inject = ["HTTPCache", "ProfileService"];
})();
/**
 * notosplus.manage
 * CONTROLLER: UserAddController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.manage')
        .controller('UserDetailController', UserDetailController);

    /* @ngInject */
    function UserDetailController($state, $stateParams,
                                  common, config, User, Dialog, ProfileService) {
        /*jshint validthis: true */
        var vm = this;
        var logger = common.logger;
        var $q = common.$q;
        var events = config.events;


        vm.cancel = cancel;
        vm.hasChanges = false;
        vm.loading = false;
        vm.isSaving = false;
        vm.isResetPwd = false;
        vm.resetPwd = resetPassword;
        vm.save = save;
        vm.remove = remove;
        vm.user = null;
        vm.users = [];
        vm.defaultUsername = defaultUsername;
        vm.defaultDomain = ProfileService.current().domain_name;

        Object.defineProperty(vm, 'canSave', {get: canSave});

        activate();

        function activate() {
            //onDestroy();
            //onHasChanges();

            getRequestedUser();

            common.$broadcast(events.controllerActivateSuccess);
        }

        function cancel() {
            goToUsers();
        }

        function canSave() {
            return !vm.isSaving;
        }

        function getRequestedUser() {
            vm.loading = true;
            var val = $stateParams.id;
            if (val === 'new') {
                vm.user = User.one();
                vm.isResetPwd = true;
                vm.loading = false;

                return vm.user;
            }

            User.one(val).get()
                .then(function (data) {
                    if (data) {
                        vm.user = data;

                        vm.loading = false;
                        return vm.user;

                    } else {
                        logger.warning('Could not find user id = ' + val);
                        goToUsers();
                    }
                    vm.loading = false;
                })
                .catch(function (error) {
                    logger.error('Error while getting user id = ' + val + '; ' + error);
                    goToUsers();
                });
        }

        function goToUsers() {
            $state.go('manage.users');
        }

        function save() {

            if (!canSave()) {
                return $q.when(null);
            } // Must return a promise

            vm.isSaving = true;

            return vm.user.save().then(function () {
                vm.isSaving = false;

                goToUsers();
            }).catch(function (error) {
                vm.isSaving = false;
                logger.error('Kon gebruiker niet opslaan. [' + error + ']');
            });

        }

        function resetPassword() {
            return Dialog.resetPasswordDialog()
                .then(patchResettedPassword);

            function patchResettedPassword(data) {
                vm.user.one('password').patch(data)
                    .then(passwordWasResetted);

                function passwordWasResetted(user) {
                    common.logger.info('Paswoord opnieuw ingesteld voor ' + user.full_name);
                }
            }
        }

        function remove() {
            return Dialog.deleteDialog(vm.user.full_name)
                .then(removeUser);

            function removeUser() {
                vm.user.remove().then(function () {
                    vm.user.clearCache();
                    logger.warning(vm.user.full_name + ' werd met succes verwijderd.');
                    goToUsers();
                }).catch(function (response) {
                    Dialog.confirmationDialog('Verwijderen mislukt',
                        'Het verwijderen van ' + vm.user.full_name + ' is mislukt. Probeer het later opnieuw.');
                });
            }
        }

        function defaultUsername() {
            if(vm.user.username) {
                return vm.user.username;
            }
            return vm.user.first
        }
    }
    UserDetailController.$inject = ["$state", "$stateParams", "common", "config", "User", "Dialog", "ProfileService"];
})();
/**
 * notosplus.manage
 * CONTROLLER: UsersController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.manage')
        .controller('UsersController', UsersController);


    /* @ngInject */
    function UsersController($state, config, common, User) {
        /*jshint validthis: true */
        var vm = this;

        var keyCodes = config.keyCodes;
        var events = config.events;

        vm.filteredUsers = [];
        vm.gotoUser = gotoUser;
        vm.refresh = refresh;
        vm.search = search;
        vm.userSearch = '';
        vm.users = [];


        activate();

        function activate() {
            common.$broadcast(events.controllerActivateSuccess);
            getUsers();
        }

        function applyFilter() {
            vm.filteredUsers = vm.users.filter(userFilter);
        }


        function getUsers(forceRefresh) {
            vm.loading = true;

            if (forceRefresh) {
                if (vm.users) {
                    vm.users.clearCache();
                }
            }
            User.getList().then(function (data) {
                vm.users = vm.filteredUsers = data;
                vm.loading = false;

                return vm.users;
            });
        }


        function gotoUser(user) {
            if (user && user.id) {
                $state.go('manage.users.detail', {id: user.id});
            }
        }

        function refresh() {
            vm.userSearch = '';
            getUsers(true);
        }

        function search($event) {
            if ($event.keyCode === keyCodes.esc) {
                vm.userSearch = '';
            }
            applyFilter();
        }

        function userFilter(user) {
            var isMatch = true;
            if (vm.userSearch) {
                isMatch = common.textContains(user.name, vm.userSearch);
                isMatch |= common.textContains(user.username, vm.userSearch);
            }

            return isMatch;
        }
    }
    UsersController.$inject = ["$state", "config", "common", "User"];
})();
/**
 * notosplus.portal
 * CONTROLLER: BlogDetail
 */
(function () {
    'use strict';

    angular
        .module('notosplus.portal')
        .controller('BlogDetailController', BlogDetailController);

    /* @ngInject */
    function BlogDetailController(config, common, $state, $stateParams, Blog, Dialog, logger) {
        /*jshint validthis: true */
        var vm = this;

        vm.blog = {};

        vm.cancel = cancel;
        vm.save = save;
        vm.loading = false;
        vm.isSaving = false;

        Object.defineProperty(vm, 'canSave', {get: canSave});

        var events = config.events;

        activate();
        //////////////


        function activate() {
            getRequestedBlog();
            common.$broadcast(events.controllerActivateSuccess);
        }

        function cancel() {
            gotoBlogs();
        }

        function canSave() {
            return !vm.isSaving;
        }

        function getRequestedBlog() {
            vm.loading = true;


            var val = $stateParams.id;
            if (val === 'new') {
                vm.blog = Blog.one();
                vm.loading = false;

                return vm.blog;
            }

            Blog.one(val).get()
                .then(blogCompleted)
                .catch(blogFailed);

            function blogCompleted(data) {
                if (data) {
                    vm.blog = data;
                    vm.loading = false;
                    return vm.blog;
                } else {
                    logger.error('Could not load blog id = ' + val);
                    gotoBlogs();
                }
            }

            function blogFailed(error) {
                logger.error('Error while getting blog id= ' + val + '; ' + error);
                gotoBlogs();
            }

        }

        function gotoBlogs() {
            $state.go('portal.blogs');
        }

        function save() {
            if (!canSave()) {
                return $q.when(null);
            } // Must return a promise

            vm.isSaving = true;

            return vm.blog.save().then(function () {
                vm.isSaving = false;

                gotoBlogs();
            }).catch(function (error) {
                vm.isSaving = false;
                logger.error('Kon blog niet opslaan. [' + error + ']');
            });
        }

        function remove() {
            return Dialog.deleteDialog(vm.blog.name + ' [' + vm.blog.url + ']')
                .then(removeBlog);

            function removeBlog() {
                vm.blog.remove().then(function () {
                    vm.blog.clearCache();
                    logger.warning(vm.blog.name + ' werd met succes verwijderd.');
                    gotoBlogs();
                }).catch(function (error) {
                    Dialog.confirmationDialog('Verwijderen mislukt',
                        'Het verwijderen van ' + vm.blog.name + ' is mislukt. Probeer het later opnieuw.');
                });
            }
        }
    }
    BlogDetailController.$inject = ["config", "common", "$state", "$stateParams", "Blog", "Dialog", "logger"];
})();
/**
 * notosplus.portal
 * FACTORY: Blog
 */

(function () {
    'use strict';

    angular
        .module('notosplus.portal')
        .factory('Blog', Blog);

    /* @ngInject */
    function Blog(HTTPCache, ProfileService) {
        var service = HTTPCache.service('organization/' + ProfileService.realm().id + '/blogs');

        return service;

    }
    Blog.$inject = ["HTTPCache", "ProfileService"];
})();
/**
 * notosplus.portal
 * CONTROLLER: BlogsController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.portal')
        .controller('BlogsController', BlogsController);

    /* @ngInject */
    function BlogsController(common, config, Blog, $state) {
        /*jshint validthis: true */
        var vm = this;

        vm.blogs = [];
        vm.filteredBlogs = [];
        vm.filter = {
            terms: null
        }

        vm.loading = false;
        vm.refresh = refresh;
        vm.gotoBlog = gotoBlog;

        var events = config.events;

        activate();
        /////////////

        function activate() {
            getBlogs();
            common.$broadcast(events.controllerActivateSuccess);
        }

        function getBlogs(forceRefresh) {
            vm.loading = true;

            if (forceRefresh) {
                if (vm.blogs) {
                    vm.blogs.clearCache();
                }
            }

            Blog.getList().then(blogsCompleted);

            function blogsCompleted(response) {
                vm.blogs = vm.filteredBlogs = response;
                vm.loading = false;
                return vm.blogs;
            }
        }

        function refresh() {
            getBlogs(true);
        }

        function gotoBlog(blog) {
            if (blog && blog.id) {
                $state.go('portal.blogs.detail', {id: blog.id});
            }
        }
    }
    BlogsController.$inject = ["common", "config", "Blog", "$state"];
})();
/**
 * notosplus.widgets
 * DIRECTIVE: ntFa
 */
(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .directive('ntFa', ntFa);

    ntFa.$inject = [];

    function ntFa() {
        var directive = {
            restrict: 'E',
            link: linkFunc
        };

        return directive;
        //////////////////////

        function linkFunc(scope, element, attrs) {
            var i = angular.element('<i class="fa" />');
            var classes = attrs.name.split(' ');

            angular.forEach(classes, function (value) {
                i.addClass('fa-' + value);
            });

            element.replaceWith(i);
        }
    }
})();


/**
 * notosplus.widgets
 * DIRECTIVE: ntSpinner
 */
(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .directive('ntSpinner', ntSpinner);

    /* @ngInject */
    function ntSpinner() {
        var directive = {
            restrict: 'EA',
            compile: compile
        };

        return directive;
        //////////////////////
        function compile(elem, attrs) {
            if (elem[0].tagName === 'TABLE') {
                addSpinnerToTBody(elem, attrs);
            } else {
                addSpinnerToElement(elem, attrs);
            }
        }

        function addSpinnerToTBody(element, attrs) {
            var tbody = element.find('tbody');
            var html = ['<tr ng-show="' + attrs.spinnerShow + '">',
                            '<td ',
                                (attrs.hasOwnProperty('colspan') ? 'colspan="' + attrs.colspan + '" ' : ''),
                            ' style="text-align:center">',
                                '<img src="/img/busy/busyatom.gif" style="width:40px;height:40px;">',
                            '</td>',
                        '</tr>'].join('');

            tbody.prepend(html);
        }
        function addSpinnerToElement(element, attrs) {
            var html = ['<div ng-show="' + attrs.spinnerShow + '" class="col-md-12 text-center">',
                    '<img src="/img/busy/busyatom.gif" style="width:40px;height:40px;">',
                '</div>',
                '<div class="clearfix"></div>'].join('');

            element.prepend(html);
        }
    }
})();


/**
 * notosplus.widgets
 * FACTORY: spinnerService
 */

(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .factory('spinnerService', spinnerService);

    /* @ngInject */
    function spinnerService() {
        var spinners = {};
        var service = {
            _register: register,
            _unregister: unregister,
            _unregisterAll: unregisterAll,
            show: show,
            hide: hide,
            showGroup: showGroup,
            hideGroup: hideGroup,
            showAll: showAll,
            hideAll: hideAll
        }

        return service;
        //////////////
        function register(data) {
            if(!data.hasOwnProperty('name')) {
                throw new Error('Spinner must specify a name when registering with the spinner service.');
            }
            if(spinners.hasOwnProperty(data.name)) {
                throw new Error('A spinner with the name "' + data.name + '" has already been registered.');
            }
            spinners[data.name] = data;
        }

        function unregister(name) {
            if(spinners.hasOwnProperty(name)) {
                delete spinners[name];
            }
        }

        function unregisterAll() {
            for(var name in spinners) {
                delete spinners[name];
            }
        }

        function show(name) {
            var spinner  = spinners[name];
            if(!spinner) {
                throw  new Error('No spinner named "' + name + '" is registered.');
            }
            spinner.show();
        }

        function hide(name) {
            var spinner  = spinners[name];
            if(!spinner) {
                throw  new Error('No spinner named "' + name + '" is registered.');
            }
            spinner.hide();
        }

        function showGroup(group) {
            var groupExists = false;
            for(var name in spinners) {
                var spinner = spinners[name];
                if(spinner.group === group) {
                    spinner.show();
                    groupExists = true;
                }
            }
            if(!groupExists) {
                throw new Error('No spinners found with group "' + group + '".');
            }
        }
        function hideGroup(group) {
            var groupExists = false;
            for(var name in spinners) {
                var spinner = spinners[name];
                if(spinner.group === group) {
                    spinner.hide();
                    groupExists = true;
                }
            }
            if(!groupExists) {
                throw new Error('No spinners found with group "' + group + '".');
            }
        }
        function showAll() {
            for(var name in spinners) {
                spinners[name].show();
            }
        }
        function hideAll() {
            for(var name in spinners) {
                spinners[name].hide();
            }
        }
    }
})();
/**
 * notosplus.widgets
 * DIRECTIVE: ntMiniSideBar
 */
(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .directive('ntMiniSidebar', ntMiniSidebar);

    function ntMiniSidebar() {
        var directive = {
            restrict: 'A',
            template: [
                '<a class="navbar-minimalize minimalize-styl-2 btn btn-primary" href="" ng-click="vm.minimalize()">',
                '<i class="fa fa-bars"></i>',
                '</a>'
            ].join(''),

            controller: MinimizeController,
            controllerAs: 'vm',
            bindToController: true // because the scope is isolated
        };

        MinimizeController.$inject = ["$timeout"];
        return directive;
        //////////////////////

        /* @ngInject */
        function MinimizeController($timeout) {
            var vm = this;
            vm.minimalize = minimalize;

            //////////////////////////////////
            function minimalize() {
                angular.element('body').toggleClass('mini-navbar');
                if (!angular.element('body').hasClass('mini-navbar') || angular.element('body').hasClass('body-small')) {
                    // Hide menu in order to smoothly turn on when maximize menu
                    angular.element('#side-menu').hide();
                    // For smoothly turn on menu
                    $timeout(
                        function () {
                            angular.element('#side-menu').fadeIn(500);
                        }, 100);
                } else if (angular.element('body').hasClass('fixed-sidebar')) {
                    angular.element('#side-menu').hide();
                    $timeout(
                        function () {
                            angular.element('#side-menu').fadeIn(500);
                        }, 300);
                } else {
                    // Remove all inline style from jquery fadeIn function to reset menu state
                    angular.element('#side-menu').removeAttr('style');
                }
            }
        }
    }
})();


/**
 * notosplus.widgets
 * DIRECTIVE: ntPagination
 */
(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .directive('ntPagination', ntPagination);

    /* @ngInject */
    function ntPagination($compile) {
        var directive = {
            restrict: 'EA',
            scope: {
                totalItems: '=',
                itemsPerPage: '=',
                currentPage: '='
            },
            link: linkFunc,
            controller: PaginateController,
            controllerAs: 'vm',
            bindToController: true // because the scope is isolated
        };

        PaginateController.$inject = ["$scope"];
        return directive;
        //////////////////////

        function linkFunc(scope, element, attrs) {
            var pagination = angular.element('<pagination />')
            pagination.attr('data-boundary-links', true);
            pagination.attr('data-total-items', 'totalItems');
            pagination.attr('data-items-per-page', 'itemsPerPage');
            pagination.attr('data-max-size', 5);
            pagination.attr('data-ng-model', 'currentPage');
            pagination.attr('data-previous-text', '‹');
            pagination.attr('data-next-text', '›');
            pagination.attr('data-first-text', '«');
            pagination.attr('data-last-text', '»');
            pagination.attr('data-ng-hide', 'hide');
            if (attrs['class']) {
                pagination.attr('class', attrs['class']);
            }

            $compile(pagination)(scope);
            element.replaceWith(pagination);
        }

        /* @ngInject */
        function PaginateController($scope) {
            var vm = this;

            vm.hide = false;
            vm.itemsPerPage = 10;
            vm.currentPge = 0;

            $scope.$watch('vm.totalItems', function () {
                vm.hide = (vm.totalItems <= vm.itemsPerPage);
            });
        }
    }
    ntPagination.$inject = ["$compile"];
})();


/**
 * notosplus
 * DIRECTIVE: ntSideNavigation
 */
(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .directive('ntSideNavigation', ntSideNavigation);

    /* @ngInject */
    function ntSideNavigation($timeout) {
        var directive = {
            restrict: 'EA',
            link: linkFunc
        };

        return directive;
        //////////////////////

        function linkFunc(scope, element) {
            $timeout(function () {
                $(element).metisMenu();
            })
        };
    }
    ntSideNavigation.$inject = ["$timeout"];
})();


/**
 * notosplus.widgets
 * FILTER: offset
 */
(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .filter('offset', filter);


    function filter() {
        return function offset(input, start) {
            if (input) {
                start = parseInt(start, 10);
                return input.slice(start);
            }
            return [];
        };
    }
})();
//# sourceMappingURL=data:application/json;base64,