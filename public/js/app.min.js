(function() {
    'use strict';

    angular
        .module('notosplus', [
            //shared modules
            'notosplus.core',
            'notosplus.widgets',
            'notosplus.auth',
            'notosplus.data',
            'notosplus.layout',

            //app modules
            'notosplus.dashboard',
            'notosplus.manage',
            'notosplus.library',
            'notosplus.curricula',
            'notosplus.tags',
            'notosplus.portal',
            'notosplus.assets'
        ]);
})();
angular
    .module('notosplus.core', [
        //Angular
        'ngAnimate', 'ngSanitize', 'ngResource',

        //3rd party
        'ui.bootstrap',
        'ncy-angular-breadcrumb',
        'breeze.angular',   // tells breeze to use $q instead of Q.js
        'breeze.directives',// breeze validation directive (zValidate),
        'ngzWip',
        'ngplus',
        'restangular',
        'checklist-model',
        'ngTagsInput',
        'datePicker',
        'ngFileUpload',

        //cross app modules
        'blocks.exception',
        'blocks.logger',
        'blocks.router'
    ]);
(function () {
    'use strict';

    angular
        .module('notosplus.data', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.assets', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.auth', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.curricula', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.dashboard', [

        ]);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.layout', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.library', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.manage', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.portal', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.tags', []);
})();
(function () {
    'use strict';

    angular
        .module('notosplus.widgets', []);
})();
(function () {
    'use strict';

    angular
        .module('blocks.exception', ['blocks.logger']);
})();
(function () {
    'use strict';

    angular
        .module('blocks.logger', []);
})();
(function () {
    'use strict';

    angular
        .module('blocks.router', [
            'ui.router'
        ]);
})();
(function () {
    'use strict';

    angular
        .module('datePicker', []);
})();
/**
 * notosplus.core
 * FACTORY: bootstrap.dialog
 */

(function () {
    'use strict';

    angular
        .module('notosplus.core')
        .factory('Dialog', modalDialog);

    /* @ngInject */
    function modalDialog($modal, $templateCache) {
        var service = {
            deleteDialog: deleteDialog,
            confirmationDialog: confirmationDialog,
            inputDialog: inputDialog,
            resetPasswordDialog: resetPasswordDialog,
            selectImageDialog: selectImageDialog
        };

        registerModalDialog($templateCache);
        registerResetPasswordDialog($templateCache);
        registerSelectImageDialog($templateCache);
        registerInputDialog($templateCache);

        return service;
        ////////////////

        function deleteDialog(itemName) {
            var title = 'Ben je zeker?';
            itemName = itemName || 'item';
            var msg = 'Verwijder ' + itemName + '?';

            return confirmationDialog(title, msg);
        }

        function confirmationDialog(title, msg, okText, cancelText) {
            var modalOptions = {
                templateUrl: 'modalDialog.tpl.html',
                controller: ModalInstance,
                keyboard: true,
                resolve: {
                    options: function () {
                        return {
                            title: title,
                            message: msg,
                            okText: okText,
                            cancelText: cancelText,
                            password: '',
                            confirmPassword: ''
                        };
                    }
                }
            };

            return $modal.open(modalOptions).result;
        }

        function inputDialog(title, msg, okText, cancelText) {
            var modalOptions = {
                templateUrl: 'inputDialog.tpl.html',
                controller: InputModalInstance,
                keyboard: true,
                resolve: {
                    options: function () {
                        return {
                            title: title,
                            message: msg,
                            okText: okText,
                            cancelText: cancelText,
                            input: ''
                        }
                    }
                }
            }

            return $modal.open(modalOptions).result;
        }

        function resetPasswordDialog(title, msg, okText, cancelText) {
            var modalOptions = {
                templateUrl: 'resetPasswordDialog.tpl.html',
                controller: ResetPasswordModalInstance,
                keyboard: true,
                resolve: {
                    options: function () {
                        return {
                            title: title,
                            message: msg,
                            okText: okText,
                            cancelText: cancelText,
                            password: '',
                            confirmPassword: ''
                        };
                    }
                }
            };

            return $modal.open(modalOptions).result;
        }

        function selectImageDialog(title) {
            var modalOptions = {
                templateUrl: 'selectImageDialog.tpl.html',
                controller: SelectImageModalInstance,
                keyboard: true,
                windowClass: 'fullscreen',
                resolve: {
                    options: function () {
                        return {
                            title: title
                        }
                    }
                }
            }
            return $modal.open(modalOptions).result;
        }


    }
    modalDialog.$inject = ["$modal", "$templateCache"];

    /* @ngInject */
    function ModalInstance($scope, $modalInstance, options) {
        $scope.title = options.title || 'Titel';
        $scope.message = options.message || '';
        $scope.okText = options.okText || 'Ok';
        $scope.cancelText = options.cancelText || 'Annuleren';
        $
        scope.ok = ok;
        $scope.cancel = cancel;

        function ok() {
            $modalInstance.close('ok');
        }

        function cancel() {
            $modalInstance.dismiss('cancel');
        }
    }
    ModalInstance.$inject = ["$scope", "$modalInstance", "options"];

    /* @ngInject */
    function InputModalInstance($scope, $modalInstance, options) {
        $scope.title = options.title || '';
        $scope.message = options.message || '';
        $scope.okText = options.okText || 'Ok';
        $scope.cancelText = options.cancelText || 'Annuleren';
        $scope.input = '';

        $scope.ok = ok;
        $scope.cancel = cancel;

        function ok() {
            $modalInstance.close({
                input: $scope.input
            });
        }

        function cancel() {
            $modalInstance.dismiss('cancel');
        }
    }
    InputModalInstance.$inject = ["$scope", "$modalInstance", "options"];

    /* @ngInject */
    function ResetPasswordModalInstance($scope, $modalInstance, options) {
        $scope.title = options.title || 'Paswoord opnieuw instellen';
        $scope.message = options.message || 'Geef het nieuwe paswoord in.';
        $scope.okText = options.okText || 'Wijzig';
        $scope.cancelText = options.cancelText || 'Annuleren';
        $scope.password = '';
        $scope.confirmPassword = '';

        $scope.ok = function () {
            $modalInstance.close({password: $scope.password});
        };
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }
    ResetPasswordModalInstance.$inject = ["$scope", "$modalInstance", "options"];

    /* @ngInject */
    function SelectImageModalInstance($scope, $modalInstance, options, Asset, Upload, common, Dialog, $http) {
        $scope.title = options.title || 'Selecteer een afbeelding';
        $scope.files = options.files || [{url: '/img/icons/icon-chain-64.png'}];
        $scope.queue = [];
        $scope.selectedFile = {};
        $scope.progress = 0;

        $scope.uploadFiles = uploadFiles;
        $scope.importFromUrl = importFromUrl;

        $scope.insert = insert;
        $scope.cancel = cancel;
        $scope.itemClicked = itemClicked;
        $scope.backgroundImage = makeBGImageStyle;


        load();
        ///////////////////////////////////////////////////////

        function load() {
            Asset.getImagesForWebsites().then(imagesCompleted);
            function imagesCompleted(response) {
                $scope.files = response;
            }
        }

        function insert() {
            $modalInstance.close({
                file: $scope.selectedFile
            }); //TODO: set select image here
        }

        function cancel() {
            $modalInstance.dismiss('cancel');
        }

        function itemClicked(file) {
            $scope.selectedFile = file;
        }

        function makeBGImageStyle(file) {
            if (file) {
                var style = 'background-image:url(' + file.thumbpath + ')';
                return style;
            }
        }

        function uploadFiles(files) {


            if (files && files.length) {
                angular.forEach(files, function (file) {
                    file.loading = true;
                    $scope.queue.unshift(file);
                });

                Upload.upload({
                    url: 'api/upload',
                    data: {file: files},
                    headers: {'X-CSRF-TOKEN': common.csrfToken()}
                }).then(uploadComplete, uploadError, uploadProgress);
            }

            function uploadProgress(evt) {
                var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                $scope.progress = progressPercentage;
                console.log('progress: ' + progressPercentage + '% ' + evt.config.data.file.name);
            }

            function uploadComplete(response) {
                angular.forEach(response.data, function (asset) {
                    $scope.files.unshift(asset);
                });
                $scope.queue = [];

            }

            function uploadError(response) {
                console.log(response.status);
            }
        }

        function importFromUrl() {
            Dialog.inputDialog('Importeer URL', 'Importeer een afbeelding van het internet', 'Importeer', 'Annuleren')
                .then(importUrl);

            function importUrl(result) {
                $http.post('/api/upload/url', {url: result.input})
                    .then(postComplete);

                function postComplete(response) {
                    $scope.files.unshift(response.data);
                }
            }
        }
    }
    SelectImageModalInstance.$inject = ["$scope", "$modalInstance", "options", "Asset", "Upload", "common", "Dialog", "$http"];


    /* REGISTER MODALS -------------------------- */
    function registerModalDialog($templateCache) {
        $templateCache.put('modalDialog.tpl.html',
            '<div>' +
            '    <div class="modal-header">' +
            '        <button type="button" class="close" data-dismiss="modal" ' +
            '            aria-hidden="true" data-ng-click="cancel()">&times;</button>' +
            '        <h3>{{title}}</h3>' +
            '    </div>' +
            '    <div class="modal-body">' +
            '        <p>{{message}}</p>' +
            '    </div>' +
            '    <div class="modal-footer">' +
            '        <button class="btn btn-primary" data-ng-click="ok()">{{okText}}</button>' +
            '        <button class="btn btn-info" data-ng-click="cancel()">{{cancelText}}</button>' +
            '    </div>' +
            '</div>');
    }

    function registerInputDialog($templateCache) {
        $templateCache.put('inputDialog.tpl.html',
            '<div>' +
            '    <div class="modal-header">' +
            '        <button type="button" class="close" data-dismiss="modal" ' +
            '            aria-hidden="true" data-ng-click="cancel()">&times;</button>' +
            '        <h3>{{title}}</h3>' +
            '    </div>' +
            '    <div class="modal-body">' +
            '        <p>{{message}}</p>' +
            '       <input type="text" class="form-control" data-ng-model="input" placeholder="{{placeholderText}}"> ' +
            '    </div>' +
            '    <div class="modal-footer">' +
            '        <button class="btn btn-primary" data-ng-click="ok()">{{okText}}</button>' +
            '        <button class="btn btn-info" data-ng-click="cancel()">{{cancelText}}</button>' +
            '    </div>' +
            '</div>');
    }

    function registerResetPasswordDialog($templateCache) {
        $templateCache.put('resetPasswordDialog.tpl.html',
            '<div>' +
            '    <div class="modal-header">' +
            '        <button type="button" class="close" data-dismiss="modal" ' +
            '            aria-hidden="true" data-ng-click="cancel()">&times;</button>' +
            '        <h3>{{title}}</h3>' +
            '    </div>' +
            '    <div class="modal-body">' +
            '        <p>{{message}}</p>' +
            '        <div class="form-group">' +
            '           <label class="control-label">Paswoord</label>' +
            '           <input type="password" data-ng-model="password" placeholder="Nieuw paswoord" class="form-control">' +
            '        </div>' +
            '        <div class="form-group">' +
            '           <label class="control-label">Herhaal password</label>' +
            '           <input type="password" data-ng-model="confirmPassword" placeholder="Herhaal paswoord" class="form-control">' +
            '        </div>' +
            '        <div class="form-group">' +
            '           <span class="text-danger" data-ng-show="password !== confirmPassword && password !== \'\'">De paswoorden komen niet overeen.</span>' +
            '        </div>' +
            '    </div>' +
            '    <div class="modal-footer">' +
            '        <button class="btn btn-primary" data-ng-click="ok()" data-ng-disabled="password !== confirmPassword || password === \'\'">{{okText}}</button>' +
            '        <button class="btn btn-info" data-ng-click="cancel()">{{cancelText}}</button>' +
            '    </div>' +
            '</div>');
    }

    function registerSelectImageDialog($templateCache) {
        $templateCache.put('selectImageDialog.tpl.html',
            '<div>' +
            '   <div class="modal-header">' +
            '       <button type="button" class="close" data-dismiss="modal"' +
            '           aria-hidden="true" data-ng-click="cancel()">&times;</button>' +
            '       <h3>{{title}}</h3>' +
            '   </div>' +
            '   <div class="modal-body" ngf-drop="uploadFiles($files)" class="drop-zone" ngf-multiple="true" ngf-pattern="\'image/*\'"' +
            '           ngf-drag-over-class="\'drop-zone-hover\'">' +
            '       <div class="row">' +
            '           <div class="col-md-7 col-xs-12">' +
            '               <input type="text" class="form-control" placeholder="zoeken">' +
            '           </div>' +
            '           <div class="col-md-5 col-xs-12" style="text-align:right;">' +
            '               <button class="btn btn-info" ngf-select="uploadFiles($files)" multiple="multiple"><i class="fa fa-upload"></i> upload</button>' +
            '               <button class="btn btn-default" data-ng-click="importFromUrl()"><i class="fa fa-globe"></i> importeer van web</button>' +
            '           </div>' +
            '       </div>' +
            '' +
            '       <div class="row m-t-md" >' +
            '           <div class="col-md-8 col-xs-12">' +
            '                <div class="file-list">' +
            '                   <div class="col-md-2 col-xs-4" data-ng-repeat="file in queue">' +
            '' +
            '                       <div class="loader-image" data-ng-if="file.loading"><i class="fa fa-spinner fa-spin"></i></div>' +
            '                       <img class="grid-image thumb" ngf-thumbnail="file" data-ng-if="!file.loading">' +
            '                   </div>' +
            '                   <div class="col-md-2 col-xs-4" data-ng-repeat="file in files" ' +
            '                       data-ng-click="itemClicked(file)" data-ng-class="{\'selected\': file.id == selectedFile.id }">' +
            '                       <a class="grid-image" style="{{backgroundImage(file)}}"></a>' +
            '                   </div>' +
            '               </div>' +
            '           </div>' +
            '           <div class="col-md-4 col-xs-hidden">' +
            '               <div class="title-box" data-ng-show="selectedFile">' +
            '               <span class="progress">' +
            '                   <div style="width:{{progress}}%" ng-bind="progress + \'%\'"></div>' +
            '               </span>' +
            '                   <h3 class="title">details</h3>' +
            '                   <strong>naam: </strong> {{selectedFile.title}}<br/>' +
            '                   <strong>toegevoegd: </strong> {{selectedFile.created_at | date:\'dd.MM.yyyy HH:mm\'}}' +
            '               </div>' +
            '           </div>' +
            '       </div>' +
            '   </div>' +
            '' +
            '   <div class="modal-footer">' +
            '       <button class="btn btn-primary" data-ng-click="insert()">Invoegen' +
            '       </button>' +
            '       <button class="btn btn-info" data-ng-click="cancel()">Annuleren</button>' +
            '   </div>' +
            '</div>'
        );
    }
})();
/**
 * notosplus.core
 * FACTORY: common
 */

(function () {
    'use strict';

    angular
        .module('notosplus.core')
        .factory('common', common);

    function common($q, $rootScope, $timeout, logger) {
        var throttles = {};
        var csrf = null;

        var service = {
            // common angular dependencies
            $broadcast: $broadcast,
            $q: $q,
            $timeout: $timeout,
            // generic
            isNumber: isNumber,
            debouncedThrottle: debouncedThrottle,
            logger: logger,
            textContains: textContains,
            csrfToken: csrfToken
        }

        return service;
        ////////////////////////

        function $broadcast() {
            return $rootScope.$broadcast.apply($rootScope, arguments);
        }


        function debouncedThrottle(key, callback, delay, immediate) {
            // Perform some action (callback) after a delay.
            // Track the callback by key, so if the same callback
            // is issued again, restart the delay.
            var defaultDelay = 1000;
            delay = delay || defaultDelay;
            if (throttles[key]) {
                $timeout.cancel(throttles[key]);
                throttles[key] = undefined;
            }
            if (immediate) {
                callback();
            } else {
                throttles[key] = $timeout(callback, delay);
            }
        }

        function isNumber(val) {
            // negative or positive
            return (/^[-]?\d+$/).test(val);
        }

        function textContains(text, searchText) {
            return text && -1 !== text.toLowerCase().indexOf(searchText.toLowerCase());
        }

        function csrfToken() {
            return csrf || getCsrfToken();
            ////////////////////

            function getCsrfToken() {

                var metas = document.getElementsByTagName('meta');

                for (var i = 0; i < metas.length; i++) {
                    var meta = metas[i];
                    if (meta.getAttribute('name') == "csrf_token") {
                        csrf = meta.getAttribute('content');
                    }
                }

                return csrf;
            }
        }
    }
    common.$inject = ["$q", "$rootScope", "$timeout", "logger"];
})();
/**
 * notosplus.data
 * FACTORY: breezeConfig
 */

(function () {
    'use strict';

    angular
        .module('notosplus.core')
        .factory('breezeConfig', breezeConfig);

    /* @ngInject */
    function breezeConfig(breeze) {
        var service = {
            remoteServiceName: '/api/breeze',
            breeze: breeze
        }

        return service;
        ////////////////
    }
    breezeConfig.$inject = ["breeze"];

})();
(function () {
    'use strict';

    var core = angular.module('notosplus.core');

    core.config(toastrConfig);
    core.config(momentConfig);

    /* @ngInject */
    function toastrConfig(toastr) {
        toastr.options.timeOut = 4000;
        toastr.options.closeButton = true;
        toastr.options.progressBar = true;
        toastr.options.positionClass = 'toast-bottom-right';
    }
    toastrConfig.$inject = ["toastr"];

    function momentConfig(moment) {
        moment.locale('nl_BE');
    }
    momentConfig.$inject = ["moment"];

    var keyCodes = {
        backspace: 8,
        tab: 9,
        enter: 13,
        esc: 27,
        space: 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        insert: 45,
        del: 46
    };

    var events = {
        controllerActivateSuccess: 'controller.activateSuccess',
        entitiesChanged: 'datacontext.entitiesChanged',
        entitiesImported: 'datacontext.entitiesImported',
        hasChangesChanged: 'datacontext.hasChangesChanged',
        storage: {
            error: 'store.error',
            storeChanged: 'store.changed',
            wipChanged: 'wip.changed'
        },
        loggedInOrganizationChanged: 'profile.loggedInAtChanged'
    };


    var config = {
        appErrorPrefix: '[noTos+ Fout] ',
        appTitle: 'noTos+',
        keyCodes: keyCodes,
        version: '1.0.0',
        events: events
    };

    core.value('config', config);

    core.config(configure);

    /* @ngInject */
    function configure($urlRouterProvider, $stateProvider,
                       routehelperConfigProvider, $breadcrumbProvider,
                       zStorageConfigProvider, zDirectivesConfigProvider,
                       RestangularProvider) {

        configureRouting();
        configureBreadcrumb();

        configureZStorage();
        configureZValidate();

        configureRestangular();


        function configureRouting() {
            routehelperConfigProvider.config.$urlRouterProvider = $urlRouterProvider;
            routehelperConfigProvider.config.$stateProvider = $stateProvider;

            routehelperConfigProvider.config.title = config.appTitle;
        }

        function configureBreadcrumb() {
            $breadcrumbProvider.setOptions({
                prefixStateName: 'index',
                template: 'bootstrap3',
                includeAbstract: true
            });
        }

        function configureZStorage() {
            // Setup our Breeze-based offline storage
            zStorageConfigProvider.config = {
                // zStorage
                enabled: false,
                key: 'noTosPlus',
                events: config.events.storage,

                // zStorageWip
                wipKey: 'noTosPlus.wip',
                appErrorPrefix: config.appErrorPrefix,
                newGuid: breeze.core.getUuid,

                // zStorageCore
                version: config.version
            };
        }

        function configureZValidate() {
            zDirectivesConfigProvider.zValidateTemplate =
                '<span class="invalid"><i class="fa fa-warning-sign"></i>' +
                'Onbegrijpelijk! %error%</span>';

        }

        function configureRestangular() {
            var baseUrl = '/api';

            RestangularProvider.setBaseUrl(baseUrl);
        }
    }
    configure.$inject = ["$urlRouterProvider", "$stateProvider", "routehelperConfigProvider", "$breadcrumbProvider", "zStorageConfigProvider", "zDirectivesConfigProvider", "RestangularProvider"];
})();
/* global toastr:false, moment:false */
(function() {
    'use strict';

    angular
        .module('notosplus.core')
        .constant('toastr', toastr)
        .constant('moment', moment)
        .constant('_', window._);
})();
/**
 * notosplus.core
 * FACTORY: Init
 */

(function () {
    'use strict';

    angular
        .module('notosplus.core')
        .factory('Init', Init);

    /* @ngInject */
    function Init() {
        var wasInitialized = false;

        var service = {
            isInitialized: isInitialized,
            initializing: initializing
        }

        return service;
        ////////////////

        function isInitialized() {
            return wasInitialized;
        }
        function initializing(init) {
            wasInitialized = init;
        }

    }
})();
    /**
 * notosplus.core
 * FILTER: Highlight
 */
(function () {
    'use strict';

    angular
        .module('notosplus.data')
        .filter('Highlight', Highlight);

    /**
     *
     */
    function Highlight($sce) {
        return function (str, termsToHighlight) {
            if (termsToHighlight === '') {
                return $sce.trustAsHtml(str);
            }
            // Sort terms by length
            termsToHighlight = termsToHighlight.split(" ");
            termsToHighlight.sort(function (a, b) {
                return b.length - a.length;
            });

            // Regex to simultaneously replace terms
            var regex = new RegExp('(?!<[^>]*?>)' + termsToHighlight.join('|') + '(?![^<]*?</[^>]*?>)', 'gi');
            return $sce.trustAsHtml(str.replace(regex, '<span class="match">$&</span>'));
        };
    }
    Highlight.$inject = ["$sce"];

})();
/**
 * notosplus.data
 * FACTORY: HTTPCache
 */

(function () {
    'use strict';

    angular
        .module('notosplus.data')
        .factory('HTTPCache', HTTPCache);

    /* @ngInject */
    function HTTPCache(Restangular, $cacheFactory, logger) {
        var cache;
        cache = $cacheFactory('http');


        return Restangular.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setDefaultHttpFields({cache: cache});
            RestangularConfigurer.setResponseInterceptor(function (response, operation) {
                if (operation === 'put' || operation === 'post' || operation === 'delete') {
                    cache.removeAll();

                }
                return response;
            });

            RestangularConfigurer.setErrorInterceptor(
                function (response) {
                    console.log(response);
                    var s = response.status;
                    if (s === 400 || s === 404 || s === 409 || s === 500) {
                        logger.error(response.data, response, response.statusText);

                    } else if (s === 401 || s === 403 || s === 410 ||
                                s === 412 || s === 415 || s === 422) {
                        logger.warning(response.statusText, response, response.statusText);

                    } else {
                        logger.error(response.statusText + ' - Fout ' + response.status, response, 'Fout');
                    }

                    // Stop the promise chain.
                    return false;
                }
            );

            // Custom Global Method(s) for Restangularized Elements.
            RestangularConfigurer.setOnElemRestangularized(function (elem, isCollection) {
                elem.clearCache = function () {
                    cache.removeAll();
                }
                return elem;
            });
        });
    }
    HTTPCache.$inject = ["Restangular", "$cacheFactory", "logger"];
})();
/**
 * notosplus.assets
 * FACTORY: Asset
 */

(function () {
    'use strict';

    angular
        .module('notosplus.assets')
        .factory('Asset', Asset);

    /* @ngInject */
    function Asset(HTTPCache, ProfileService) {
        var service = {
            getList: getList,
            getImagesForWebsites: getImagesForWebsites
        }

        return service;
        ////////////////////

        function getList(type) {
            if (!type) {
                return HTTPCache.service(_baseUrl()).getList();
            } else {
                return HTTPCache.service(_baseUrl() + '/mime/' + type).getList();
            }
        }

        function getImagesForWebsites() {
            return HTTPCache.service('/websites/assets/mime/image').getList();
        }

        function _baseUrl() {
            return '/organization/' + ProfileService.realm().id + '/assets';
        }
    }
    Asset.$inject = ["HTTPCache", "ProfileService"];
})();
/**
 * notosplus.auth
 * FACTORY: Profile
 */

(function () {
    'use strict';

    angular
        .module('notosplus.auth')
        .factory('ProfileService', ProfileService);

    /* @ngInject */
    function ProfileService($http, exception, $q, common, config) {
        var cache = null;
        var _realm = null;
        var events = config.events;

        var service = {
            current: current,
            realm: realm,
            setRealm: setRealm
        };

        return service;
        //////////////

        function current(forceRefresh) {
            if (cache && !forceRefresh) {
                //should return promise
                return $q.when(cache);
            }

            return $http.get('/api/user/profile')
                .then(getCurrentComplete)
                .catch(function (message) {
                    exception.catcher('Profiel van de huidige gebruiker opvragen, lukt niet.')(message);
                });


            function getCurrentComplete(response, status, headers, config) {
                cache = response.data;
                service.setRealm(response.data.realm);
                return response.data;
            }

        }

        function realm() {
            return _realm; //synchronous, as async data was here at initialization
        }

        function setRealm(realm) {
            //realm.domain_name= realm.domain_name.replace(/\./g, '_');
            _realm = realm;
            common.$broadcast(events.realmChanged, realm);
        }

    }
    ProfileService.$inject = ["$http", "exception", "$q", "common", "config"];
})();
/**
 * notosplus.curricula
 * FACTORY: Curriculum
 */

(function () {
    'use strict';

    angular
        .module('notosplus.curricula')
        .factory('Curriculum', Curriculum);

    /* @ngInject */
    function Curriculum(HTTPCache) {

        var service= {
            get: get,
            objectives: objectives
        }


        return service;
        //////////////

        function get(course) {
            return HTTPCache.one('/curricula', course);
        }
        function objectives(course) {
            return get(course).getList('objectives');
        }
    }
    Curriculum.$inject = ["HTTPCache"];
})();
/**
 * notosplus.dashboard
 * CONTROLLER: DashboardController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.dashboard')
        .controller('DashboardController', DashboardController);

    /* @ngInject */
    function DashboardController(common, config) {
        /*jshint validthis: true */
        var vm = this;

        var events = config.events;

        activate();
        /////////////

        function activate() {
            common.$broadcast(events.controllerActivateSuccess);
        }
    }
    DashboardController.$inject = ["common", "config"];
})();
/**
 * ROUTES: notosplus.dashboard
 */
(function () {
    'use strict';

    angular
        .module('notosplus.dashboard')
        .run(configRoutes);

    /* @ngInject */
    function configRoutes(routehelper) {
        routehelper.configureStates(getStates());
    }
    configRoutes.$inject = ["routehelper"];;

    function getStates() {
        return [
            {
                state: 'index',
                config: {
                    abstract: true,
                    url: '/index',
                    ncyBreadcrumb: {
                        label: 'start'
                    }
                }
            },
            {
                state: 'index.dashboard',
                config: {
                    url: '/dashboard',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/dashboard/dashboard.html',
                            controller: 'DashboardController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Dashboard'
                }
            }
        ];
    };
})();
/**
 * notosplus.layout
 * CONTROLLER: shell
 */
(function () {
    'use strict';

    angular
        .module('notosplus.layout')
        .controller('ShellController', ShellController);

    /* @ngInject */
    function ShellController(Init, $rootScope, config, ProfileService, logger, $q) {
        /*jshint validthis: true */
        var vm = this;

        vm.busyMessage = 'Even geduld...';
        vm.isBusy = true;
        vm.showSplash = false;
        vm.avatar = null;
        vm.profile = {};
        vm.loggedInOrganization = null;

        var events = config.events;

        activate();
        /////////////

        function activate() {

            if (!Init.isInitialized()) {
                vm.showSplash = true;
                Init.initializing(true);

                //loadProfile //loadGroups (aka load realm defaults)
                $q.all([loadProfile()]).then(function () {
                    initialized();
                });


            }

            function loadProfile() {
                return getProfile().then(function (data) {
                    vm.profile = data;
                    vm.profile.fullName = vm.profile.first_name + ' ' + vm.profile.last_name;
                    //vm.profile.organizations = profile.organizations;

                    vm.avatar =
                        vm.profile.avatar ||
                        (vm.profile.gender === 'F' ? '/img/user/female.png' : '/img/user/male.png') ||
                        '/img/user/male.png';
                });
            }
        }

        function getProfile() {
            return ProfileService.current().then(function (data) {
                vm.profile = data;
                return vm.profile;
            });
        }

        function toggleSpinner(on) {
            vm.isBusy = on;
        }

        $rootScope.$on('$stateChangeStart',
            function (event, next, current) {
                //toggleSpinner(true);
            }
        );

        $rootScope.$on(events.controllerActivateSuccess,
            function (data) {
                toggleSpinner(false);
            }
        );
        $rootScope.$on(events.realmChanged,
            function (scope, realm) {
                vm.realm = realm;
                console.log(vm.realm);
            });

        function initialized() {
            vm.showSplash = false;

            logger.info('Welkom ' + vm.profile.first_name);
        }

    }
    ShellController.$inject = ["Init", "$rootScope", "config", "ProfileService", "logger", "$q"];
})();
/**
 * ROUTES: notosplus.library
 */
(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .run(configRoutes);

    /* @ngInject */
    function configRoutes(routehelper) {
        routehelper.configureStates(getStates());
    }
    configRoutes.$inject = ["routehelper"];;

    function getStates() {
        return [
            {
                state: 'library',
                config: {
                    abstract: true,
                    url: '/library'
                }
            },
            {
                state: 'library.books',
                config: {
                    url: '/books',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/library/books/books.html',
                            controller: 'BooksController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Boeken'
                }
            },
            {
                state: 'library.books.detail',
                config: {
                    url: '/:id',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/library/books/bookdetail.html',
                            controller: 'BookDetailController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Boek bewerken'
                }
            },
            {
                state: 'library.websites',
                config: {
                    url: '/websites',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/library/websites/websites.html',
                            controller: 'WebsitesController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Websites'
                }
            },
            {
                state: 'library.websites.detail',
                config: {
                    url: '/:id',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/library/websites/websitedetail.html',
                            controller: 'WebsiteDetailController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Website bewerken'
                }
            },
            {
                state: 'library.websites.detail.objectives',
                config: {
                    url: '/objectives',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/curricula/objectives/select_objectives.html',
                            controller: 'SelectObjectivesController',
                            controllerAs: 'vm'
                        }
                    }
                },
                title: 'Doelen selecteren'
            }
        ];
    };
})();
/**
 * ROUTES: notosplus.manage
 */
(function () {
    'use strict';

    angular
        .module('notosplus.manage')
        .run(configRoutes);

    /* @ngInject */
    function configRoutes(routehelper) {
        routehelper.configureStates(getStates());
    }
    configRoutes.$inject = ["routehelper"];;

    function getStates() {
        return [
            {
                state: 'manage',
                config: {
                    abstract: true,
                    url: '/manage',
                    title: 'Beheer'
                }
            },
            {
                state: 'manage.users',
                config: {
                    url: '/users',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/manage/users/users.html',
                            controller: 'UsersController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Gebruikers'
                }
            },
            {
                state: 'manage.users.detail',
                config: {
                    url: '/:id',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/manage/users/userdetail.html',
                            controller: 'UserDetailController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Gebruiker bewerken'
                }
            }
        ];
    };
})();
/**
 * ROUTES: notosplus.portal
 */
(function () {
    'use strict';

    angular
        .module('notosplus.portal')
        .run(configRoutes);

    /* @ngInject */
    function configRoutes(routehelper) {
        routehelper.configureStates(getStates());
    }
    configRoutes.$inject = ["routehelper"];;

    function getStates() {
        return [
            {
                state: 'portal',
                config: {
                    abstract: true,
                    url: '/portal'
                },
                title: 'Portaal'
            },
            {
                state: 'portal.blogs',
                config: {
                    url: '/blogs',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/portal/blogs/blogs.html',
                            controller: 'BlogsController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Blogs'
                }
            },
            {
                state: 'portal.blogs.detail',
                config: {
                    url: '/:id',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/portal/blogs/blogdetail.html',
                            controller: 'BlogDetailController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Blog bewerken'
                }
            },
            {
                state: 'portal.calendar',
                config: {
                    url: '/calendar',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/portal/info/calendar.html',
                            controller: 'CalendarController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Kalender'
                }
            },
            {
                state: 'portal.calendar.event',
                config: {
                    url: '/:id',
                    views: {
                        'content@': {
                            templateUrl: 'js/modules/portal/info/calendarevent.html',
                            controller: 'CalendarEventController',
                            controllerAs: 'vm'
                        }
                    },
                    title: 'Gebeurtenis bewerken'
                }
            }
        ];
    };
})();
/**
 * notosplus.tags
 * FACTORY: Tag
 */

(function () {
    'use strict';

    angular
        .module('notosplus.tags')
        .factory('Tag', Tag);

    /* @ngInject */
    function Tag(HTTPCache) {
        var service = HTTPCache.service('tags');

        return service;

    }
    Tag.$inject = ["HTTPCache"];
})();
// Include in index.html so that app level exceptions are handled.
// Exclude from testRunner.html which should run exactly what it wants to run
(function() {
    'use strict';

    angular
        .module('blocks.exception')
        .provider('exceptionHandler', exceptionHandlerProvider)
        .config(config);

    /**
     * Must configure the exception handling
     * @return {[type]}
     */
    function exceptionHandlerProvider() {
        /* jshint validthis:true */
        this.config = {
            appErrorPrefix: undefined
        };

        this.configure = function (appErrorPrefix) {
            this.config.appErrorPrefix = appErrorPrefix;
        };

        this.$get = function() {
            return {config: this.config};
        };
    }

    /**
     * Configure by setting an optional string value for appErrorPrefix.
     * Accessible via config.appErrorPrefix (via config value).
     * @param  {[type]} $provide
     * @return {[type]}
     * @ngInject
     */
    function config($provide) {
        $provide.decorator('$exceptionHandler', extendExceptionHandler);
    }
    config.$inject = ["$provide"];

    /**
     * Extend the $exceptionHandler service to also display a toast.
     * @param  {Object} $delegate
     * @param  {Object} exceptionHandler
     * @param  {Object} logger
     * @return {Function} the decorated $exceptionHandler service
     */
    function extendExceptionHandler($delegate, exceptionHandler, logger) {
        return function(exception, cause) {
            var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';
            var errorData = {exception: exception, cause: cause};
            exception.message = appErrorPrefix + exception.message;
            $delegate(exception, cause);
            /**
             * Could add the error to a service's collection,
             * add errors to $rootScope, log errors to remote web server,
             * or log locally. Or throw hard. It is entirely up to you.
             * throw exception;
             *
             * @example
             *     throw { message: 'error message we added' };
             */
            logger.error(exception.message, errorData);
        };
    }
    extendExceptionHandler.$inject = ["$delegate", "exceptionHandler", "logger"];
})();
/**
 * blocks.exception
 * FACTORY: exception
 */

(function () {
    'use strict';

    angular
        .module('blocks.exception')
        .factory('exception', exception);

    /* @ngInject */
    function exception(logger) {
        var service = {
            catcher: catcher
        };
        return service;

        function catcher(message) {
            return function(reason) {
                logger.error(message, reason);
            };
        }
    }
    exception.$inject = ["logger"];
})();
/**
 * blocks.logger
 * FACTORY: logger
 */

(function () {
    'use strict';

    angular
        .module('blocks.logger')
        .factory('logger', logger);

    logger.$inject = ['$log', 'toastr'];

    function logger($log, toastr) {
        var service = {
            showToasts: true,

            error: error,
            info: info,
            success: success,
            warning: warning,

            removed: removed,
            saved: saved,

            // straight to console; bypass toastr
            log: $log.log
        };

        return service;
        /////////////////////

        function error(message, data, title) {
            toastr.error(message, title);
            $log.error('Fout: ' + message, data);
        }

        function info(message, data, title) {
            toastr.info(message, title);
            $log.info('Info: ' + message, data);
        }

        function success(message, data, title) {
            toastr.success(message, title);
            $log.info('Succes: ' + message, data);
        }

        function warning(message, data, title) {
            toastr.warning(message, title);
            $log.warn('Let op: ' + message, data);
        }

        function removed(message, data, title) {
            toastr.warning(message, title);
            $log.warn('Verwijderd: ' + message, data);
        }

        function saved(message, data, title) {
            toastr.success(message, title);
            $log.info('Bewaard: ' + message, data);
        }
    }
})();
/**
 * notosplus.router
 * FACTORY: routehelper
 */

(function () {
    'use strict';

    angular
        .module('blocks.router')
        .provider('routehelperConfig', routehelperConfig)
        .factory('routehelper', routehelper);

    routehelper.$inject = ['routehelperConfig', '$rootScope', '$state'];

    function routehelperConfig() {
        /* jshint validthis:true */
        this.config = {};

        this.$get = function () {
            return {
                config: this.config
            };
        };
    }

    function routehelper(routehelperConfig, $rootScope, $state) {
        var $urlRouterProvider = routehelperConfig.config.$urlRouterProvider;
        var $stateProvider = routehelperConfig.config.$stateProvider;

        var service = {
            configureStates: configureStates,
            states: states,
            get: get
        };

        init();

        return service;
        //////////////////

        function configureStates(states) {
            states.forEach(function (state) {
                if (state.config.title) {
                    state.config.ncyBreadcrumb = {
                        label: state.config.title.toLowerCase()
                    }
                }

                $stateProvider.state(state.state, state.config);
            });
        }

        function states() {
            return $state.get();
        }

        function get(pattern) {
            var result = null;
            states().forEach(function (state) {
                if (state.name === pattern) {
                    result = state;
                }
            });
            return result;
        }


        function init() {
            updateDocTitle();
            $urlRouterProvider.otherwise('/index/dashboard');
        }

        function updateDocTitle() {
            $rootScope.$on('$stateChangeSuccess',
                function (event, current, previous) {
                    var title = routehelperConfig.config.title + (current.title ? ' | ' + current.title : '');
                    $rootScope.title = title; // data bind to <title>
                    $rootScope.$state = current;
                }
            );
        }

    }
})();
/**
 * notosplus.curricula
 * CONTROLLER: SelectObjectivesController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.curricula')
        .controller('SelectObjectivesController', SelectObjectivesController);

    /* @ngInject */
    function SelectObjectivesController(common, config, WebsiteDraft, Curriculum,
                                        $state, $scope, SearchSiblingsIncludedFilter) {
        /*jshint validthis: true */
        var vm = this;

        vm.objectives = [];
        vm.filtered = [];
        vm.selectedItems = [];
        vm.website = null;

        vm.save = save;
        vm.cancel = cancel;
        vm.compareObjective = compareObjective;

        vm.itemsPerPage = 10;
        vm.currentPage = 1;
        vm.totalItems = 0;

        vm.search = '';

        var events = config.events;

        activate();
        ////////////

        function activate() {
            getItems().then(function () {
                loadDraft();
                common.$broadcast(events.controllerActivateSuccess);
            });

            /*
             * Search functions
             */
            $scope.$watch('vm.search', function (term) {
                if (vm.objectives) {
                    vm.filtered = SearchSiblingsIncludedFilter(vm.objectives, term);
                    vm.totalItems = vm.filtered.length;
                }
            });
        }

        function getItems() {
            return Curriculum.objectives('wiskunde').then(function (data) {
                vm.totalItems = data.length;
                return vm.objectives = vm.filtered = data;
            });
        }

        function loadDraft() {
            vm.website = WebsiteDraft.load();
            if (vm.website && vm.website.objectives) {
                return vm.selectedItems = vm.website.objectives;
            }
        }

        function compareObjective(o1, o2) {
            return o1.id === o2.id;
        }

        function save() {
            vm.website.objectives = vm.selectedItems;
            WebsiteDraft.draft(vm.website);
            gotoWebsite();
        }

        function cancel() {
            gotoWebsite();
        }

        function gotoWebsite() {
            $state.go('library.websites.detail', {id: vm.website.id});
        }
    }
    SelectObjectivesController.$inject = ["common", "config", "WebsiteDraft", "Curriculum", "$state", "$scope", "SearchSiblingsIncludedFilter"];
})();
/**
 * notosplus.data
 * FILTER: SearchSiblingsIncluded
 */
(function () {
    'use strict';

    angular
        .module('notosplus.curricula')
        .filter('SearchSiblingsIncluded', SearchSiblingsIncluded);

    /**
     *
     */
    function SearchSiblingsIncluded() {
        return function (input, searchText) {

            if (searchText === undefined)
           f

            var filtered = [],
                filteredIds = [];
            angular.forEach(input, function (item) {
                var lower_code = angular.lowercase(item.code);
                var lower_name = angular.lowercase(item.name);
                var lower_searchText = angular.lowercase(searchText);

                if (lower_name.indexOf(lower_searchText) > -1 ||
                    lower_code.indexOf(lower_searchText) > -1) {

                    if (item.parent_id) {
                        angular.forEach(input, function (pitem) {
                            if (pitem.id === item.parent_id) {
                                if (filteredIds.indexOf(pitem.id) === -1) {
                                    filtered.push(pitem);
                                    filteredIds.push(pitem.id);
                                }
                            }
                        });
                    }
                    if (filteredIds.indexOf(item.id) === -1) {
                        filtered.push(item);
                        filteredIds.push(item.id);
                    }
                    if (!item.parent_id) {
                        angular.forEach(input, function (chitem) {
                            if (chitem.parent_id === item.id) {
                                if (filteredIds.indexOf(chitem.id) === -1) {
                                    filtered.push(chitem);
                                    filteredIds.push(chitem.id);
                                }
                            }
                        });
                    }

                }
            });
            return filtered;
        }

    }
})();
/**
 * notosplus.library
 * FACTORY: Author
 */

(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .factory('Author', Author);

    /* @ngInject */
    function Author(HTTPCache) {
        var service = HTTPCache.service('authors');

        return service;
    }
    Author.$inject = ["HTTPCache"];
})();
/**
 * notosplus.library
 * FACTORY: Book
 */

(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .factory('Book', Book);

    /* @ngInject */
    function Book(HTTPCache, ProfileService ) {
        var service = HTTPCache.service('/organization/' + ProfileService.realm().id + '/books');

        return service;
    }
    Book.$inject = ["HTTPCache", "ProfileService"];
})();
/**
 * notosplus.library
 * CONTROLLER: BookDetailController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .controller('BookDetailController', BookDetailController);

    /* @ngInject */
    function BookDetailController($state, common, config, $stateParams, _,
                                  Book, Dialog, Tag, Author, Publisher) {
        /*jshint validthis: true */
        var vm = this;
        var logger = common.logger;
        var $q = common.$q;
        var events = config.events;

        vm.loading = false;
        vm.isSaving = false;

        vm.book = null;
        vm.authors = [];
        vm.publishers = [];
        vm.tags = [];

        vm.cancel = cancel;
        vm.save = save;
        vm.remove = remove;

        vm.loadAuthors = loadAuthors;
        vm.loadPublishers = loadPublishers;
        vm.loadTags = loadTags;

        Object.defineProperty(vm, 'canSave', {get: canSave});

        activate();
        ////////////////////////
        function activate() {

            preloadTags();
            preloadAuthors();
            preloadPublishers();

            getRequestedBook();

            common.$broadcast(events.controllerActivateSuccess);
        }

        function preloadTags() {
            return Tag.getList().then(tagsCompleted);

            function tagsCompleted(response) {
                return vm.tags = response;
            }
        }

        function preloadAuthors() {
            return Author.getList().then(authorsCompleted);

            function authorsCompleted(response) {
                return vm.authors = response;
            }
        }

        function preloadPublishers() {
            return Publisher.getList().then(publishersCompleted);

            function publishersCompleted(response) {
                return vm.publishers = response;
            }
        }

        function loadTags(query) {
            return _.select(vm.tags, function (t) {
                return _.contains(t.name.toLowerCase(), query.toLowerCase());
            });
        }

        function loadAuthors(query) {
            return _.select(vm.authors, function (a) {
                return _.contains(a.last_name.toLowerCase(), query.toLowerCase());
            });
        }

        function loadPublishers(query) {
            return _.select(vm.publishers, function (p) {
                return _.contains(p.last_name.toLowerCase(), query.toLowerCase());
            });
        }

        function getRequestedBook() {
            var val = $stateParams.id;
            if (val === 'new') {
                vm.book = Book.one();
                vm.loading = false;

                return vm.book;
            }

            Book.one(val).get()
                .then(bookCompleted);

            function bookCompleted(data) {
                vm.book = data;
                vm.loading = false;
                return vm.book;
            }
        }

        function gotoBooks() {
            $state.go('library.books');
        }

        function canSave() {
            return !vm.isSaving;
        }

        function save() {
            if (!canSave()) {
                return $q.when(null);
            }

            vm.isSaving = true;

            return vm.book.save()
                .then(savedBook)
                .catch(failedSaveBook);

            function savedBook(response) {
                vm.isSaving = false;
                gotoBooks();
            }

            function failedSaveBook(error) {
                vm.isSaving = false;
                logger.error('Kon boek niet opslaan. [' + error + ']');
            }
        }

        function remove() {
            return Dialog.deleteDialog(vm.book.name)
                .then(removeBook);

            function removeBook() {
                vm.book.remove()
                    .then(removedBook)
                    .catch(failedRemoveBook);

                function removedBook() {
                    vm.book.clearCach();
                    logger.warning(vm.book.name + ' werd met succes verwijderd.');
                    gotoBooks();
                }

                function failedRemoveBook() {
                    Dialog.confirmationDialog('Verwijderen mislukt.',
                        'Het verwijderen van ' + vm.book.name + ' is mislukt. Probeer later opnieuw.');
                }
            }


        }

        function cancel() {
            gotoBooks();
        }

    }
    BookDetailController.$inject = ["$state", "common", "config", "$stateParams", "_", "Book", "Dialog", "Tag", "Author", "Publisher"];
})();
/**
 * notosplus.library
 * CONTROLLER: BooksController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .controller('BooksController', BooksController);

    /* @ngInject */
    function BooksController(common, config, Book, $state) {
        /*jshint validthis: true */
        var vm = this;

        vm.books = [];
        vm.filteredBooks = [];
        vm.filter = {
            terms: null
        }

        vm.gotoBook = gotoBook;

        vm.loading = false;
        vm.refresh = refresh;


        var events = config.events;

        activate();
        ////////////

        function activate() {
            getBooks();
            common.$broadcast(events.controllerActivateSuccess);
        }

        function getBooks(forceRefresh) {
            vm.loading = true;

            if (forceRefresh) {
                if (vm.books) {
                    vm.books.clearCache();
                }
            }
            Book.getList().then(function (data) {
                vm.books = vm.filteredBooks = data;
                vm.loading = false;

                return vm.books;
            });
        }

        function gotoBook(book) {
            if(book && book.id) {
                $state.go('library.books.detail', {id:book.id});
            }
        }

        function refresh() {
            getBooks(true);
        }
    }
    BooksController.$inject = ["common", "config", "Book", "$state"];
})();
/**
 * notosplus.library
 * FILTER: isbn
 */
(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .filter('hyphenateIsbn', hyphenateIsbn);

    /**
     *
     */
    function hyphenateIsbn() {
        return function (isbn) {
            isbn = (isbn + '').replace(/[^x\d]/ig, '');
            //pad just in case
            if (isbn.length < 10) {
                isbn = ('000000000' + isbn);
                isbn = isbn.substr(isbn.length - 10);
            } else if (isbn.length != 10 && isbn.length != 13) {
                return;
            }

            var parts = [];
            var uccPref = '978';
            if (isbn.length == 13) {
                uccPref = isbn.substr(0, 3);
                parts.push(uccPref);
                isbn = isbn.substr(3);
            }

            if (!prefs[uccPref]) return;

            for (var i = 1, pref = isbn[0]; !prefs[uccPref][pref] && i < isbn.length - 2; pref += isbn[i++]) {
            }

            var regRanges = prefs[uccPref][pref];
            if (!regRanges) {
                return;
            }

            parts.push(pref);
            isbn = isbn.substr(pref.length);
            var reg = '';
            var done = false;
            for (var j = 0; !done && j < isbn.length; j++) {
                reg += isbn[j];
                for (var k = 0, m = regRanges.length; k < m && reg.length >= regRanges[k].length; k++) {
                    if (reg.length == regRanges[k].length && reg <= regRanges[k]) {
                        if (k % 2 || regRanges[k] == regRanges[k + 1]) {
                            done = true;
                        }
                        break;
                    }
                }
            }

            if (!done) return;

            isbn = isbn.substr(reg.length);
            parts.push(reg);
            parts.push(isbn.substr(0, isbn.length - 1));
            parts.push(isbn[isbn.length - 1]);
            return parts.join('-');
        }
    }

    var prefs = {
        "978": {
            "0": ["00", "19", "200", "699", "7000", "8499", "85000", "89999", "900000", "949999", "9500000", "9999999"],
            "1": ["00", "09", "100", "399", "4000", "5499", "55000", "86979", "869800", "998999", "9990000", "9999999"],
            "2": ["00", "19", "200", "349", "400", "699", "7000", "8399", "35000", "39999", "84000", "89999", "900000", "949999", "9500000", "9999999"],
            "3": ["00", "02", "04", "19", "030", "033", "200", "699", "0340", "0369", "7000", "8499", "03700", "03999", "85000", "89999", "95400", "96999", "99000", "99499", "99500", "99999", "900000", "949999", "9500000", "9539999", "9700000", "9899999"],
            "5": ["01", "19", "200", "420", "430", "430", "440", "440", "450", "699", "0050", "0099", "4210", "4299", "4310", "4399", "4410", "4499", "7000", "8499", "9200", "9299", "9501", "9799", "9910", "9999", "00000", "00499", "85000", "89999", "91000", "91999", "93000", "94999", "98000", "98999", "900000", "909999", "9500000", "9500999", "9900000", "9909999"],
            "7": ["00", "09", "100", "499", "5000", "7999", "80000", "89999", "900000", "999999"],
            "80": ["00", "19", "200", "699", "7000", "8499", "85000", "89999", "900000", "999999"],
            "82": ["00", "19", "200", "699", "7000", "8999", "90000", "98999", "990000", "999999"],
            "83": ["00", "19", "200", "599", "7000", "8499", "60000", "69999", "85000", "89999", "900000", "999999"],
            "84": ["00", "13", "140", "149", "200", "699", "7000", "8499", "9000", "9199", "9700", "9999", "15000", "19999", "85000", "89999", "92400", "92999", "95000", "96999", "920000", "923999", "930000", "949999"],
            "85": ["00", "19", "200", "599", "7000", "8499", "60000", "69999", "85000", "89999", "98000", "99999", "900000", "979999"],
            "86": ["00", "29", "300", "599", "6000", "7999", "80000", "89999", "900000", "999999"],
            "87": ["", "", "", "", "", "", "", "", "00", "29", "400", "649", "7000", "7999", "85000", "94999", "970000", "999999"],
            "88": ["00", "19", "200", "599", "910", "929", "6000", "8499", "9300", "9399", "85000", "89999", "95000", "99999", "900000", "909999", "940000", "949999"],
            "89": ["00", "24", "250", "549", "990", "999", "5500", "8499", "85000", "94999", "97000", "98999", "950000", "969999"],
            "90": ["", "", "", "", "00", "19", "90", "90", "94", "94", "200", "499", "5000", "6999", "8500", "8999", "70000", "79999", "800000", "849999"],
            "91": ["", "", "", "", "", "", "0", "1", "20", "49", "500", "649", "7000", "7999", "85000", "94999", "970000", "999999"],
            "92": ["0", "5", "60", "79", "800", "899", "9000", "9499", "95000", "98999", "990000", "999999"],
            "93": ["00", "09", "100", "499", "5000", "7999", "80000", "94999", "950000", "999999"],
            "94": ["000", "599", "6000", "8999", "90000", "99999"],
            "600": ["00", "09", "100", "499", "5000", "8999", "90000", "99999"],
            "601": ["00", "19", "85", "99", "200", "699", "7000", "7999", "80000", "84999"],
            "602": ["00", "11", "200", "749", "1200", "1399", "1500", "1699", "7500", "7999", "8000", "9499", "14000", "14999", "17000", "17999", "18000", "18999", "19000", "19999", "95000", "99999"],
            "603": ["00", "04", "05", "49", "500", "799", "8000", "8999", "90000", "99999"],
            "604": ["0", "4", "50", "89", "900", "979", "9800", "9999"],
            "605": ["", "", "01", "09", "90", "99", "100", "399", "4000", "5999", "60000", "89999"],
            "606": ["0", "0", "10", "49", "500", "799", "8000", "9199", "92000", "99999"],
            "607": ["00", "39", "400", "749", "7500", "9499", "95000", "99999"],
            "608": ["0", "0", "7", "9", "10", "19", "200", "449", "4500", "6499", "65000", "69999"],
            "609": ["00", "39", "400", "799", "8000", "9499", "95000", "99999"],
            "611": ["", ""],
            "612": ["00", "29", "50", "99", "300", "399", "4000", "4499", "45000", "49999"],
            "613": ["0", "9"],
            "615": ["", "", "00", "09", "100", "499", "5000", "7999", "80000", "89999"],
            "616": ["00", "19", "200", "699", "7000", "8999", "90000", "99999"],
            "617": ["00", "49", "500", "699", "7000", "8999", "90000", "99999"],
            "618": ["00", "19", "200", "499", "5000", "7999", "80000", "99999"],
            "619": ["00", "14", "150", "699", "7000", "8999", "90000", "99999"],
            "621": ["", "", "", "", "", "", "00", "29", "400", "599", "8000", "8999", "95000", "99999"],
            "950": ["00", "49", "500", "899", "9000", "9899", "99000", "99999"],
            "951": ["0", "1", "20", "54", "550", "889", "8900", "9499", "95000", "99999"],
            "952": ["00", "19", "60", "65", "80", "94", "200", "499", "5000", "5999", "6600", "6699", "7000", "7999", "9500", "9899", "67000", "69999", "99000", "99999"],
            "953": ["0", "0", "10", "14", "51", "54", "150", "509", "6000", "9499", "55000", "59999", "95000", "99999"],
            "954": ["00", "28", "300", "799", "2900", "2999", "8000", "8999", "9300", "9999", "90000", "92999"],
            "955": ["20", "43", "550", "799", "0000", "1999", "4500", "4999", "8000", "9499", "44000", "44999", "50000", "54999", "95000", "99999"],
            "956": ["00", "19", "200", "699", "7000", "9999"],
            "957": ["00", "02", "05", "19", "21", "27", "31", "43", "440", "819", "0300", "0499", "2000", "2099", "8200", "9699", "28000", "30999", "97000", "99999"],
            "958": ["00", "56", "600", "799", "8000", "9499", "57000", "59999", "95000", "99999"],
            "959": ["00", "19", "200", "699", "7000", "8499", "85000", "99999"],
            "960": ["00", "19", "93", "93", "200", "659", "690", "699", "6600", "6899", "7000", "8499", "9400", "9799", "85000", "92999", "98000", "99999"],
            "961": ["", "", "00", "19", "200", "599", "6000", "8999", "90000", "94999"],
            "962": ["00", "19", "200", "699", "900", "999", "7000", "8499", "8700", "8999", "85000", "86999"],
            "963": ["00", "19", "200", "699", "7000", "8499", "9000", "9999", "85000", "89999"],
            "964": ["00", "14", "150", "249", "300", "549", "970", "989", "2500", "2999", "5500", "8999", "9900", "9999", "90000", "96999"],
            "965": ["", "", "", "", "00", "19", "200", "599", "7000", "7999", "90000", "99999"],
            "966": ["00", "12", "14", "14", "130", "139", "170", "199", "279", "289", "300", "699", "910", "949", "980", "999", "1500", "1699", "2000", "2789", "2900", "2999", "7000", "8999", "90000", "90999", "95000", "97999"],
            "967": ["", "", "00", "00", "60", "89", "300", "499", "900", "989", "0100", "0999", "5000", "5999", "9900", "9989", "10000", "19999", "99900", "99999"],
            "968": ["01", "39", "400", "499", "800", "899", "5000", "7999", "9000", "9999"],
            "969": ["0", "1", "20", "39", "400", "799", "8000", "9999"],
            "970": ["01", "59", "600", "899", "9000", "9099", "9700", "9999", "91000", "96999"],
            "971": ["02", "02", "06", "49", "97", "98", "000", "015", "500", "849", "0160", "0199", "0300", "0599", "8500", "9099", "9600", "9699", "9900", "9999", "91000", "95999"],
            "972": ["0", "1", "20", "54", "550", "799", "8000", "9499", "95000", "99999"],
            "973": ["0", "0", "20", "54", "100", "169", "550", "759", "1700", "1999", "7600", "8499", "8900", "9499", "85000", "88999", "95000", "99999"],
            "974": ["00", "19", "200", "699", "7000", "8499", "9500", "9999", "85000", "89999", "90000", "94999"],
            "975": ["02", "24", "250", "599", "990", "999", "6000", "9199", "00000", "01999", "92000", "98999"],
            "976": ["0", "3", "40", "59", "600", "799", "8000", "9499", "95000", "99999"],
            "977": ["00", "19", "90", "99", "200", "499", "700", "849", "5000", "6999", "85000", "89999"],
            "978": ["000", "199", "900", "999", "2000", "2999", "8000", "8999", "30000", "79999"],
            "979": ["20", "29", "000", "099", "400", "799", "1000", "1499", "3000", "3999", "8000", "9499", "15000", "19999", "95000", "99999"],
            "980": ["00", "19", "200", "599", "6000", "9999"],
            "981": ["", "", "00", "11", "200", "289", "290", "299", "310", "399", "3000", "3099", "4000", "9999"],
            "982": ["00", "09", "70", "89", "100", "699", "9000", "9799", "98000", "99999"],
            "983": ["00", "01", "45", "49", "50", "79", "020", "199", "800", "899", "2000", "3999", "9000", "9899", "40000", "44999", "99000", "99999"],
            "984": ["00", "39", "400", "799", "8000", "8999", "90000", "99999"],
            "985": ["00", "39", "400", "599", "6000", "8999", "90000", "99999"],
            "986": ["00", "11", "120", "559", "5600", "7999", "80000", "99999"],
            "987": ["00", "09", "30", "35", "40", "44", "500", "899", "1000", "1999", "3600", "3999", "9000", "9499", "20000", "29999", "45000", "49999", "95000", "99999"],
            "988": ["00", "11", "200", "799", "8000", "9699", "12000", "14999", "15000", "16999", "17000", "19999", "97000", "99999"],
            "9927": ["", "", "00", "09", "100", "399", "4000", "4999"],
            "9929": ["0", "3", "40", "54", "550", "799", "8000", "9999"],
            "9930": ["00", "49", "500", "939", "9400", "9999"],
            "9931": ["00", "29", "300", "899", "9000", "9999"],
            "9932": ["00", "39", "400", "849", "8500", "9999"],
            "9933": ["0", "0", "10", "39", "400", "899", "9000", "9999"],
            "9934": ["0", "0", "10", "49", "500", "799", "8000", "9999"],
            "9937": ["0", "2", "30", "49", "500", "799", "8000", "9999"],
            "9938": ["00", "79", "800", "949", "9500", "9999"],
            "9939": ["0", "4", "50", "79", "800", "899", "9000", "9999"],
            "9940": ["0", "1", "20", "49", "500", "899", "9000", "9999"],
            "9942": ["00", "84", "900", "984", "8500", "8999", "9850", "9999"],
            "9943": ["00", "29", "300", "399", "4000", "9999"],
            "9944": ["60", "69", "80", "89", "100", "499", "700", "799", "900", "999", "0000", "0999", "5000", "5999"],
            "9945": ["00", "00", "08", "39", "57", "57", "010", "079", "400", "569", "580", "849", "8500", "9999"],
            "9946": ["0", "1", "20", "39", "400", "899", "9000", "9999"],
            "9947": ["0", "1", "20", "79", "800", "999"],
            "9950": ["00", "29", "300", "849", "8500", "9999"],
            "9953": ["0", "0", "10", "39", "60", "89", "400", "599", "9000", "9999"],
            "9955": ["00", "39", "400", "929", "9300", "9999"],
            "9957": ["00", "39", "70", "84", "88", "99", "400", "699", "8500", "8799"],
            "9958": ["00", "03", "10", "18", "20", "49", "040", "089", "500", "899", "0900", "0999", "1900", "1999", "9000", "9999"],
            "9959": ["0", "1", "20", "79", "98", "99", "800", "949", "970", "979", "9500", "9699"],
            "9960": ["00", "59", "600", "899", "9000", "9999"],
            "9961": ["0", "2", "30", "69", "700", "949", "9500", "9999"],
            "9962": ["00", "54", "56", "59", "600", "849", "5500", "5599", "8500", "9999"],
            "9963": ["0", "1", "20", "24", "30", "54", "250", "279", "550", "734", "2800", "2999", "7350", "7499", "7500", "9999"],
            "9964": ["0", "6", "70", "94", "950", "999"],
            "9965": ["00", "39", "400", "899", "9000", "9999"],
            "9966": ["20", "69", "000", "149", "750", "959", "1500", "1999", "7000", "7499", "9600", "9999"],
            "9971": ["0", "5", "60", "89", "900", "989", "9900", "9999"],
            "9972": ["1", "1", "00", "09", "30", "59", "200", "249", "600", "899", "2500", "2999", "9000", "9999"],
            "9973": ["00", "05", "10", "69", "060", "089", "700", "969", "0900", "0999", "9700", "9999"],
            "9974": ["0", "2", "30", "54", "95", "99", "550", "749", "7500", "9499"],
            "9975": ["0", "0", "45", "89", "100", "399", "900", "949", "4000", "4499", "9500", "9999"],
            "9977": ["00", "89", "900", "989", "9900", "9999"],
            "9978": ["00", "29", "40", "94", "300", "399", "950", "989", "9900", "9999"],
            "9979": ["0", "4", "50", "64", "66", "75", "650", "659", "760", "899", "9000", "9999"],
            "9980": ["0", "3", "40", "89", "900", "989", "9900", "9999"],
            "9981": ["00", "09", "20", "79", "100", "159", "800", "949", "1600", "1999", "9500", "9999"],
            "9982": ["00", "79", "800", "989", "9900", "9999"],
            "9983": ["", "", "80", "94", "950", "989", "9900", "9999"],
            "9984": ["00", "49", "500", "899", "9000", "9999"],
            "9986": ["00", "39", "97", "99", "400", "899", "940", "969", "9000", "9399"],
            "9987": ["00", "39", "400", "879", "8800", "9999"],
            "9988": ["0", "2", "30", "54", "550", "749", "7500", "9999"],
            "9989": ["0", "0", "30", "59", "100", "199", "600", "949", "2000", "2999", "9500", "9999"],
            "99901": ["00", "49", "80", "99", "500", "799"],
            "99903": ["0", "1", "20", "89", "900", "999"],
            "99904": ["0", "5", "60", "89", "900", "999"],
            "99905": ["0", "3", "40", "79", "800", "999"],
            "99906": ["0", "2", "30", "59", "70", "89", "90", "94", "600", "699", "950", "999"],
            "99908": ["0", "0", "10", "89", "900", "999"],
            "99909": ["0", "3", "40", "94", "950", "999"],
            "99910": ["0", "2", "30", "89", "900", "999"],
            "99911": ["00", "59", "600", "999"],
            "99912": ["0", "3", "60", "89", "400", "599", "900", "999"],
            "99913": ["", "", "", "", "0", "2", "30", "35", "600", "604"],
            "99914": ["0", "4", "50", "89", "900", "999"],
            "99915": ["0", "4", "50", "79", "800", "999"],
            "99916": ["0", "2", "30", "69", "700", "999"],
            "99919": ["0", "2", "40", "69", "70", "79", "300", "399", "800", "849", "850", "899", "900", "999"],
            "99921": ["0", "1", "8", "8", "20", "69", "90", "99", "700", "799"],
            "99922": ["0", "3", "40", "69", "700", "999"],
            "99926": ["0", "0", "10", "59", "90", "99", "600", "899"],
            "99927": ["0", "2", "30", "59", "600", "999"],
            "99928": ["0", "0", "10", "79", "800", "999"],
            "99932": ["0", "0", "7", "7", "10", "59", "80", "99", "600", "699"],
            "99935": ["0", "2", "7", "8", "30", "59", "90", "99", "600", "699"],
            "99936": ["0", "0", "10", "59", "600", "999"],
            "99937": ["0", "1", "20", "59", "600", "999"],
            "99938": ["0", "1", "20", "59", "90", "99", "600", "899"],
            "99940": ["0", "0", "10", "69", "700", "999"],
            "99941": ["0", "2", "30", "79", "800", "999"],
            "99947": ["0", "2", "30", "69", "96", "99", "700", "959"],
            "99953": ["0", "2", "30", "79", "94", "99", "800", "939"],
            "99954": ["0", "2", "30", "69", "88", "99", "700", "879"],
            "99955": ["0", "1", "20", "59", "80", "99", "600", "799"],
            "99956": ["00", "59", "86", "99", "600", "859"],
            "99958": ["0", "4", "50", "94", "950", "999"],
            "99960": ["0", "0", "10", "94", "950", "999"],
            "99961": ["0", "3", "40", "89", "900", "999"],
            "99963": ["00", "49", "500", "999"],
            "99966": ["", "", "", "", "0", "2", "30", "69", "700", "799"],
            "99967": ["", "", "0", "1", "20", "59", "600", "899"],
            "99971": ["0", "5", "60", "84", "850", "999"],
            "99974": ["", "", "40", "79", "800", "999"]
        },
        "979": {
            "10": ["00", "19", "200", "699", "7000", "8999", "90000", "97599", "976000", "999999"],
            "11": ["00", "24", "250", "549", "5500", "8499", "85000", "94999", "950000", "999999"]
        }
    };
    prefs['978']['4'] = prefs['978']['0'];
    prefs['978']['614'] = prefs['978']['609'];
    prefs['978']['99902'] = prefs['978']['99951'] = prefs['978']['611'];
    prefs['978']['620'] = prefs['978']['613'];
    prefs['978']['81'] = prefs['978']['80'];
    prefs['978']['9936'] = prefs['978']['9952'] = prefs['978']['9954'] = prefs['978']['969'];
    prefs['978']['989'] = prefs['978']['972'];
    prefs['978']['9928'] = prefs['978']['9927'];
    prefs['978']['9968'] = prefs['978']['9930'];
    prefs['978']['9948'] = prefs['978']['9951'] = prefs['978']['9932'];
    prefs['978']['9935'] = prefs['978']['9941'] = prefs['978']['9949'] = prefs['978']['9956'] = prefs['978']['9933'];
    prefs['978']['9985'] = prefs['978']['9939'];
    prefs['978']['99923'] = prefs['978']['99924'] = prefs['978']['99934'] = prefs['978']['99957'] = prefs['978']['99964'] = prefs['978']['9947'];
    prefs['978']['9967'] = prefs['978']['9970'] = prefs['978']['9965'];
    prefs['978']['9976'] = prefs['978']['9971'];
    prefs['978']['99949'] = prefs['978']['99903'];
    prefs['978']['99939'] = prefs['978']['99945'] = prefs['978']['99904'];
    prefs['978']['99918'] = prefs['978']['99925'] = prefs['978']['99965'] = prefs['978']['99973'] = prefs['978']['99905'];
    prefs['978']['99917'] = prefs['978']['99910'];
    prefs['978']['99968'] = prefs['978']['99912'];
    prefs['978']['99920'] = prefs['978']['99970'] = prefs['978']['99972'] = prefs['978']['99914'];
    prefs['978']['99929'] = prefs['978']['99930'] = prefs['978']['99931'] = prefs['978']['99942'] = prefs['978']['99944'] = prefs['978']['99948'] = prefs['978']['99950'] = prefs['978']['99952'] = prefs['978']['99962'] = prefs['978']['99969'] = prefs['978']['99915'];
    prefs['978']['99933'] = prefs['978']['99943'] = prefs['978']['99946'] = prefs['978']['99959'] = prefs['978']['99927'];
    /*
     app.filter('ordinal', function(){
     return function(number){
     if(isNaN(number) || number < 1){
     return number;
     } else {
     var lastDigit = number % 10;
     if(lastDigit === 1){
     return number + 'st'
     } else if(lastDigit === 2){
     return number + 'nd'
     } else if (lastDigit === 3){
     return number + 'rd'
     } else if (lastDigit > 3){
     return number + 'th'
     }
     }
     }
     })
     */
})();
/**
 * notosplus.library
 * FACTORY: Publisher
 */

(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .factory('Publisher', Publisher);

    /* @ngInject */
    function Publisher(HTTPCache) {
        var service = HTTPCache.service('publishers');

        return service;

    }
    Publisher.$inject = ["HTTPCache"];
})();
/**
 * notosplus.websites
 * FILTER: SearchWebsites
 */
(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .filter('SearchWebsites', SearchWebsites);

    /**
     *
     */
    function SearchWebsites(_) {
        return function(websites, terms) {
            terms = terms.split(' ');
            return _.select(websites, function(website) {
                return _.some(terms, function(t) {
                    return _.contains(website.name.toLowerCase(), t.toLowerCase()) ||
                        _.contains(website.url.toLowerCase(), t.toLowerCase());
                });
            });
        }
    }
    SearchWebsites.$inject = ["_"];
})();
/**
 * notos-plus.library
 * FACTORY: WebsiteDraft
 */

(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .factory('WebsiteDraft', WebsiteDraft);

    /* @ngInject */
    function WebsiteDraft() {
        var website = null;

        var service = {
            draft: draft,
            load: load,
            clear: clear,
            pull: pull
        }

        return service;
        /////////////////

        function draft(website) {
            this.website = website;
        }
        function load() {
            return this.website;
        }
        function clear() {
            this.website = null;
        }
        function pull() {
            var w = this.load();
            this.clear();
            return w;
        }
    }
})();
/**
 * notosplus.library
 * FACTORY: Website
 */

(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .factory('Website', Website);

    /* @ngInject */
    function Website(HTTPCache) {
        var service = HTTPCache.service('/websites');

        return service;
    }
    Website.$inject = ["HTTPCache"];
})();
/**
 * notosplus.library
 * CONTROLLER: WebsiteDetailController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .controller('WebsiteDetailController', WebsiteDetailController);

    /* @ngInject */
    function WebsiteDetailController($state, $stateParams,
                                     common, config, Tag,
                                     Website, Dialog, WebsiteDraft, _) {
        /*jshint validthis: true */
        var vm = this;
        var logger = common.logger;
        var $q = common.$q;
        var events = config.events;

        vm.hasChanges = false;
        vm.loading = false;
        vm.isSaving = false;

        vm.objectives_changed = false;
        vm.image_changed = false;

        vm.website = null;
        vm.tags = [];

        vm.cancel = cancel;
        vm.save = save;
        vm.remove = remove;
        vm.insertImage = insertImage;
        vm.gotoObjectives = gotoObjectives;

        vm.loadTags = loadTags;


        Object.defineProperty(vm, 'canSave', {get: canSave});

        activate();
        ////////////

        function activate() {

            preloadTags();
            getRequestedWebsite();

            common.$broadcast(events.controllerActivateSuccess);
        }

        function preloadTags() {
            return Tag.getList().then(tagsCompleted);

            function tagsCompleted(response) {
                return vm.tags = response;
            }
        }

        function loadTags(query) {
            return _.select(vm.tags, function (t) {
                return _.contains(t.name.toLowerCase(), query.toLowerCase());
            });
        }

        function cancel() {
            gotoWebsites();
        }

        function canSave() {
            return !vm.isSaving;
        }

        function getRequestedWebsite() {
            vm.loading = true;

            if (WebsiteDraft.load()) {
                vm.website = WebsiteDraft.pull();
                vm.objectives_changed = true;
                vm.loading = false;
                return vm.website;
            }

            var val = $stateParams.id;
            if (val === 'new') {
                vm.website = Website.one();
                vm.loading = false;

                return vm.website;
            }


            Website.one(val).get()
                .then(websiteLoaded)
                .catch(websiteError);

            function websiteLoaded(data) {
                if (data) {
                    vm.website = data;

                    vm.loading = false;
                    return vm.website;
                } else {
                    logger.warning('Could not find website id = ' + val);
                    gotoWebsites();
                }
                vm.loading = false;
            }

            function websiteError(error){
                logger.error('Error while getting website id= ' + val + '; ' + error);
                gotoWebsites();
            }
        }

        function gotoWebsites() {
            $state.go('library.websites');
        }

        function save() {
            if (!canSave()) {
                return $q.when(null);
            } // Must return a promise

            vm.isSaving = true;

            return vm.website.save().then(function () {
                vm.isSaving = false;

                gotoWebsites();
            }).catch(function (error) {
                vm.isSaving = false;
                logger.error('Kon website niet opslaan. [' + error + ']');
            });
        }

        function remove() {
            return Dialog.deleteDialog(vm.website.name + ' [' + vm.website.url + ']')
                .then(removeWebsite);

            function removeWebsite() {
                vm.website.remove().then(function () {
                    vm.website.clearCache();
                    logger.warning(vm.website.name + ' werd met succes verwijderd.');
                    gotoWebsites();
                }).catch(function (error) {
                    Dialog.confirmationDialog('Verwijderen mislukt',
                        'Het verwijderen van ' + vm.website.name + ' is mislukt. Probeer het later opnieuw.');
                });
            }
        }

        function insertImage() {
            return Dialog.selectImageDialog()
                .then(insertImage);

            function insertImage(response) {
                vm.website.image = response.file;
                vm.image_changed = true;
            }
        }

        function gotoObjectives() {
            WebsiteDraft.draft(vm.website);
            $state.go('library.websites.detail.objectives');
        }

    }
    WebsiteDetailController.$inject = ["$state", "$stateParams", "common", "config", "Tag", "Website", "Dialog", "WebsiteDraft", "_"];
})();
/**
 * notosplus.library
 * CONTROLLER: WebsitesController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.library')
        .controller('WebsitesController', WebsitesController);

    /* @ngInject */
    function WebsitesController(common, config, $state, Website, $scope, SearchWebsitesFilter) {
        /*jshint validthis: true */
        var vm = this;

        vm.websites = [];
        vm.filteredWebsites = [];
        vm.gotoWebsite = gotoWebsite;
        vm.refresh = refresh;

        vm.filter = {
            terms: null
        };

        var events = config.events;

        activate();
        ////////////////
        $scope.$watch('vm.filter', doFilter, true);

        function activate() {
            common.$broadcast(events.controllerActivateSuccess);
            getWebsites();
        }

        function getWebsites(forceRefresh) {
            vm.loading = true;

            if (forceRefresh) {
                if (vm.websites) {
                    vm.websites.clearCache();
                }
            }
            Website.getList().then(function (data) {
                vm.websites = vm.filteredWebsites = data;
                vm.loading = false;
                return vm.websites;
            });
        }

        function gotoWebsite(website) {
            if (website && website.id) {
                $state.go('library.websites.detail', {id: website.id});
            }
        }

        function refresh() {
            getWebsites(true);
        }

        function doFilter() {
            if (vm.filter.terms && vm.filter.terms !== '') {
                vm.filteredWebsites = SearchWebsitesFilter(vm.websites, vm.filter.terms);
            } else {
                vm.filteredWebsites = vm.websites;
            }
        }
    }
    WebsitesController.$inject = ["common", "config", "$state", "Website", "$scope", "SearchWebsitesFilter"];
})();
/**
 * notosplus.manage
 * FACTORY: User
 */

(function () {
    'use strict';

    angular
        .module('notosplus.manage')
        .factory('User', User);


    /* @ngInject */
    function User(HTTPCache, ProfileService) {

        var service = HTTPCache.service('/organization/' + ProfileService.realm().id + '/user');


        return service;
    }
    User.$inject = ["HTTPCache", "ProfileService"];
})();
/**
 * notosplus.manage
 * CONTROLLER: UserAddController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.manage')
        .controller('UserDetailController', UserDetailController);

    /* @ngInject */
    function UserDetailController($state, $stateParams,
                                  common, config, User, Dialog, ProfileService) {
        /*jshint validthis: true */
        var vm = this;
        var logger = common.logger;
        var $q = common.$q;
        var events = config.events;


        vm.cancel = cancel;
        vm.hasChanges = false;
        vm.loading = false;
        vm.isSaving = false;
        vm.isResetPwd = false;
        vm.resetPwd = resetPassword;
        vm.save = save;
        vm.remove = remove;
        vm.user = null;
        vm.users = [];
        vm.defaultUsername = defaultUsername;
        vm.defaultDomain = ProfileService.current().domain_name;

        Object.defineProperty(vm, 'canSave', {get: canSave});

        activate();

        function activate() {
            //onDestroy();
            //onHasChanges();

            getRequestedUser();

            common.$broadcast(events.controllerActivateSuccess);
        }

        function cancel() {
            goToUsers();
        }

        function canSave() {
            return !vm.isSaving;
        }

        function getRequestedUser() {
            vm.loading = true;
            var val = $stateParams.id;
            if (val === 'new') {
                vm.user = User.one();
                vm.isResetPwd = true;
                vm.loading = false;

                return vm.user;
            }

            User.one(val).get()
                .then(function (data) {
                    if (data) {
                        vm.user = data;

                        vm.loading = false;
                        return vm.user;

                    } else {
                        logger.warning('Could not find user id = ' + val);
                        goToUsers();
                    }
                    vm.loading = false;
                })
                .catch(function (error) {
                    logger.error('Error while getting user id = ' + val + '; ' + error);
                    goToUsers();
                });
        }

        function goToUsers() {
            $state.go('manage.users');
        }

        function save() {

            if (!canSave()) {
                return $q.when(null);
            } // Must return a promise

            vm.isSaving = true;

            return vm.user.save().then(function () {
                vm.isSaving = false;

                goToUsers();
            }).catch(function (error) {
                vm.isSaving = false;
                logger.error('Kon gebruiker niet opslaan. [' + error + ']');
            });

        }

        function resetPassword() {
            return Dialog.resetPasswordDialog()
                .then(patchResettedPassword);

            function patchResettedPassword(data) {
                vm.user.one('password').patch(data)
                    .then(passwordWasResetted);

                function passwordWasResetted(user) {
                    common.logger.info('Paswoord opnieuw ingesteld voor ' + user.full_name);
                }
            }
        }

        function remove() {
            return Dialog.deleteDialog(vm.user.full_name)
                .then(removeUser);

            function removeUser() {
                vm.user.remove().then(function () {
                    vm.user.clearCache();
                    logger.warning(vm.user.full_name + ' werd met succes verwijderd.');
                    goToUsers();
                }).catch(function (response) {
                    Dialog.confirmationDialog('Verwijderen mislukt',
                        'Het verwijderen van ' + vm.user.full_name + ' is mislukt. Probeer het later opnieuw.');
                });
            }
        }

        function defaultUsername() {
            if(vm.user.username) {
                return vm.user.username;
            }
            return vm.user.first
        }
    }
    UserDetailController.$inject = ["$state", "$stateParams", "common", "config", "User", "Dialog", "ProfileService"];
})();
/**
 * notosplus.manage
 * CONTROLLER: UsersController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.manage')
        .controller('UsersController', UsersController);


    /* @ngInject */
    function UsersController($state, config, common, User) {
        /*jshint validthis: true */
        var vm = this;

        var keyCodes = config.keyCodes;
        var events = config.events;

        vm.filteredUsers = [];
        vm.gotoUser = gotoUser;
        vm.refresh = refresh;
        vm.search = search;
        vm.userSearch = '';
        vm.users = [];


        activate();

        function activate() {
            common.$broadcast(events.controllerActivateSuccess);
            getUsers();
        }

        function applyFilter() {
            vm.filteredUsers = vm.users.filter(userFilter);
        }


        function getUsers(forceRefresh) {
            vm.loading = true;

            if (forceRefresh) {
                if (vm.users) {
                    vm.users.clearCache();
                }
            }
            User.getList().then(function (data) {
                vm.users = vm.filteredUsers = data;
                vm.loading = false;

                return vm.users;
            });
        }


        function gotoUser(user) {
            if (user && user.id) {
                $state.go('manage.users.detail', {id: user.id});
            }
        }

        function refresh() {
            vm.userSearch = '';
            getUsers(true);
        }

        function search($event) {
            if ($event.keyCode === keyCodes.esc) {
                vm.userSearch = '';
            }
            applyFilter();
        }

        function userFilter(user) {
            var isMatch = true;
            if (vm.userSearch) {
                isMatch = common.textContains(user.name, vm.userSearch);
                isMatch |= common.textContains(user.username, vm.userSearch);
            }

            return isMatch;
        }
    }
    UsersController.$inject = ["$state", "config", "common", "User"];
})();
/**
 * notosplus.portal
 * CONTROLLER: BlogDetail
 */
(function () {
    'use strict';

    angular
        .module('notosplus.portal')
        .controller('BlogDetailController', BlogDetailController);

    /* @ngInject */
    function BlogDetailController(config, common, $state, $stateParams, Blog, Dialog, logger) {
        /*jshint validthis: true */
        var vm = this;

        vm.blog = {};

        vm.cancel = cancel;
        vm.save = save;
        vm.loading = false;
        vm.isSaving = false;

        Object.defineProperty(vm, 'canSave', {get: canSave});

        var events = config.events;

        activate();
        //////////////


        function activate() {
            getRequestedBlog();
            common.$broadcast(events.controllerActivateSuccess);
        }

        function cancel() {
            gotoBlogs();
        }

        function canSave() {
            return !vm.isSaving;
        }

        function getRequestedBlog() {
            vm.loading = true;


            var val = $stateParams.id;
            if (val === 'new') {
                vm.blog = Blog.one();
                vm.loading = false;

                return vm.blog;
            }

            Blog.one(val).get()
                .then(blogCompleted)
                .catch(blogFailed);

            function blogCompleted(data) {
                if (data) {
                    vm.blog = data;
                    vm.loading = false;
                    return vm.blog;
                } else {
                    logger.error('Could not load blog id = ' + val);
                    gotoBlogs();
                }
            }

            function blogFailed(error) {
                logger.error('Error while getting blog id= ' + val + '; ' + error);
                gotoBlogs();
            }

        }

        function gotoBlogs() {
            $state.go('portal.blogs');
        }

        function save() {
            if (!canSave()) {
                return $q.when(null);
            } // Must return a promise

            vm.isSaving = true;

            return vm.blog.save().then(function () {
                vm.isSaving = false;

                gotoBlogs();
            }).catch(function (error) {
                vm.isSaving = false;
                logger.error('Kon blog niet opslaan. [' + error + ']');
            });
        }

        function remove() {
            return Dialog.deleteDialog(vm.blog.name + ' [' + vm.blog.url + ']')
                .then(removeBlog);

            function removeBlog() {
                vm.blog.remove().then(function () {
                    vm.blog.clearCache();
                    logger.warning(vm.blog.name + ' werd met succes verwijderd.');
                    gotoBlogs();
                }).catch(function (error) {
                    Dialog.confirmationDialog('Verwijderen mislukt',
                        'Het verwijderen van ' + vm.blog.name + ' is mislukt. Probeer het later opnieuw.');
                });
            }
        }
    }
    BlogDetailController.$inject = ["config", "common", "$state", "$stateParams", "Blog", "Dialog", "logger"];
})();
/**
 * notosplus.portal
 * FACTORY: Blog
 */

(function () {
    'use strict';

    angular
        .module('notosplus.portal')
        .factory('Blog', Blog);

    /* @ngInject */
    function Blog(HTTPCache, ProfileService) {
        var service = HTTPCache.service('organization/' + ProfileService.realm().id + '/blogs');

        return service;

    }
    Blog.$inject = ["HTTPCache", "ProfileService"];
})();
/**
 * notosplus.portal
 * CONTROLLER: BlogsController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.portal')
        .controller('BlogsController', BlogsController);

    /* @ngInject */
    function BlogsController(common, config, Blog, $state) {
        /*jshint validthis: true */
        var vm = this;

        vm.blogs = [];
        vm.filteredBlogs = [];
        vm.filter = {
            terms: null
        }

        vm.loading = false;
        vm.refresh = refresh;
        vm.gotoBlog = gotoBlog;

        var events = config.events;

        activate();
        /////////////

        function activate() {
            getBlogs();
            common.$broadcast(events.controllerActivateSuccess);
        }

        function getBlogs(forceRefresh) {
            vm.loading = true;

            if (forceRefresh) {
                if (vm.blogs) {
                    vm.blogs.clearCache();
                }
            }

            Blog.getList().then(blogsCompleted);

            function blogsCompleted(response) {
                vm.blogs = vm.filteredBlogs = response;
                vm.loading = false;
                return vm.blogs;
            }
        }

        function refresh() {
            getBlogs(true);
        }

        function gotoBlog(blog) {
            if (blog && blog.id) {
                $state.go('portal.blogs.detail', {id: blog.id});
            }
        }
    }
    BlogsController.$inject = ["common", "config", "Blog", "$state"];
})();
/**
 * notosplus.portal
 * CONTROLLER: CalendarController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.portal')
        .controller('CalendarController', CalendarController);

    /* @ngInject */
    function CalendarController(common, config, CalendarEvent, $state) {
        /*jshint validthis: true */
        var vm = this;

        vm.loading = false;
        vm.events = [];
        vm.gotoEvent = gotoEvent;
        vm.refresh = refresh;

        var ev = config.events;

        activate();
        /////////////

        function activate() {
            getCalendarList();
            common.$broadcast(ev.controllerActivateSuccess);
        }

        function getCalendarList(forceRefresh) {
            vm.loading = true;
            if (forceRefresh) {
                if (vm.cachedEvents) {
                    vm.cachedEvents.clearCache();
                    vm.events = [];
                }
            }

            CalendarEvent.getList().then(calendarComplete);

            function calendarComplete(response) {
                vm.cachedEvents = response;
                vm.events = convertTo(response, 'start', true);
                vm.loading = false;
            }
        }

        function convertTo(arr, key, dayWise) {
            var groups = {};
            var l = arr.length;
            for (var i = 0; i < l; i++) {
                var local = moment.utc(arr[i][key]).format('DD MMMM YYYY');
                //if (dayWise) {

                //console.log(local);
                //arr[i][key] = arr[i][key].toLocaleDateString();
                //}
                // else {
                //     arr[i][key] = arr[i][key].toTimeString();
                //}
                groups[local] = groups[local] || [];
                groups[local].push(arr[i]);
            }
            return groups;
        };

        function gotoEvent(event) {
            if (event && event.id) {
                $state.go('portal.calendar.event', {id: event.id});
            }
        }

        function refresh() {
            getCalendarList(true);
        }
    }
    CalendarController.$inject = ["common", "config", "CalendarEvent", "$state"];
})();
/**
 * notosplus.portal
 * CONTROLLER: CalendarEventController
 */
(function () {
    'use strict';

    angular
        .module('notosplus.portal')
        .controller('CalendarEventController', CalendarEventController);

    /* @ngInject */
    function CalendarEventController(common, config, CalendarEvent, $state, $stateParams, moment) {
        /*jshint validthis: true */
        var vm = this;

        vm.loading = false;
        vm.gotoCalendarList = gotoCalendarList;
        vm.save = save;
        vm.cancel = cancel;
        vm.isSaving = false;
        vm.event = null;

        Object.defineProperty(vm, 'canSave', {get: canSave});


        var ev = config.events;

        activate();
        /////////////

        function activate() {
            getRequestedEvent();
            common.$broadcast(ev.controllerActivateSuccess);
        }

        function getRequestedEvent() {
            vm.loading = true;

            var val = $stateParams.id;
            if (val === 'new') {
                vm.event = CalendarEvent.one();
                vm.loading = false;

                return vm.event;
            }

            CalendarEvent.one(val).get()
                .then(eventComplete)
                .catch(eventFailed);

            function eventComplete(data) {
                if (data) {
                    data.start = new Date(data.start);
                    data.end = data.end ? new Date(data.end) : null;
                    console.log(data.end);
                    vm.event = data;
                    vm.loading = false;
                    return vm.event;
                }

            }

            function eventFailed(response) {
                logger.error('Error while getting calendarEvent id= ' + val + '; ' + error);
                gotoCalendarList();
            }
        }

        function gotoCalendarList() {
            $state.go('portal.calendar');
        }

        function canSave() {
            return !vm.isSaving;
        }

        function cancel() {
            gotoCalendarList();
        }

        function save() {
            if (!canSave()) {
                return $q.when(null);
            } // Must return a promise

            vm.isSaving = true;

            return vm.event.save().then(function () {
                vm.isSaving = false;

                gotoCalendarList();
            }).catch(function (error) {
                vm.isSaving = false;
                logger.error('Kon gebeurtenis niet opslaan. [' + error + ']');
            });
        }
    }
    CalendarEventController.$inject = ["common", "config", "CalendarEvent", "$state", "$stateParams", "moment"];
})();
/**
 * notosplus.portal
 * FACTORY: CalendarEvent
 */

(function () {
    'use strict';

    angular
        .module('notosplus.portal')
        .factory('CalendarEvent', CalendarEvent);

    /* @ngInject */
    function CalendarEvent(HTTPCache, ProfileService, $q) {
        var service = HTTPCache.service('organization/' + ProfileService.realm().id + '/calendar');

        return service;
        ////////////////
    }
    CalendarEvent.$inject = ["HTTPCache", "ProfileService", "$q"];
})();
/* =========================================================
 * bootstrap-datepicker.js
 * Repo: https://github.com/eternicode/bootstrap-datepicker/
 * Demo: http://eternicode.github.io/bootstrap-datepicker/
 * Docs: http://bootstrap-datepicker.readthedocs.org/
 * Forked from http://www.eyecon.ro/bootstrap-datepicker
 * =========================================================
 * Started by Stefan Petre; improvements by Andrew Rowls + contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

(function($, undefined){

	var $window = $(window);

	function UTCDate(){
		return new Date(Date.UTC.apply(Date, arguments));
	}
	function UTCToday(){
		var today = new Date();
		return UTCDate(today.getFullYear(), today.getMonth(), today.getDate());
	}
	function alias(method){
		return function(){
			return this[method].apply(this, arguments);
		};
	}

	var DateArray = (function(){
		var extras = {
			get: function(i){
				return this.slice(i)[0];
			},
			contains: function(d){
				// Array.indexOf is not cross-browser;
				// $.inArray doesn't work with Dates
				var val = d && d.valueOf();
				for (var i=0, l=this.length; i < l; i++)
					if (this[i].valueOf() === val)
						return i;
				return -1;
			},
			remove: function(i){
				this.splice(i,1);
			},
			replace: function(new_array){
				if (!new_array)
					return;
				if (!$.isArray(new_array))
					new_array = [new_array];
				this.clear();
				this.push.apply(this, new_array);
			},
			clear: function(){
				this.splice(0);
			},
			copy: function(){
				var a = new DateArray();
				a.replace(this);
				return a;
			}
		};

		return function(){
			var a = [];
			a.push.apply(a, arguments);
			$.extend(a, extras);
			return a;
		};
	})();


	// Picker object

	var Datepicker = function(element, options){
		this.dates = new DateArray();
		this.viewDate = UTCToday();
		this.focusDate = null;

		this._process_options(options);

		this.element = $(element);
		this.isInline = false;
		this.isInput = this.element.is('input');
		this.component = this.element.is('.date') ? this.element.find('.add-on, .input-group-addon, .btn') : false;
		this.hasInput = this.component && this.element.find('input').length;
		if (this.component && this.component.length === 0)
			this.component = false;

		this.picker = $(DPGlobal.template);
		this._buildEvents();
		this._attachEvents();

		if (this.isInline){
			this.picker.addClass('datepicker-inline').appendTo(this.element);
		}
		else {
			this.picker.addClass('datepicker-dropdown dropdown-menu');
		}

		if (this.o.rtl){
			this.picker.addClass('datepicker-rtl');
		}

		this.viewMode = this.o.startView;

		if (this.o.calendarWeeks)
			this.picker.find('tfoot th.today')
						.attr('colspan', function(i, val){
							return parseInt(val) + 1;
						});

		this._allow_update = false;

		this.setStartDate(this._o.startDate);
		this.setEndDate(this._o.endDate);
		this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);

		this.fillDow();
		this.fillMonths();

		this._allow_update = true;

		this.update();
		this.showMode();

		if (this.isInline){
			this.show();
		}
	};

	Datepicker.prototype = {
		constructor: Datepicker,

		_process_options: function(opts){
			// Store raw options for reference
			this._o = $.extend({}, this._o, opts);
			// Processed options
			var o = this.o = $.extend({}, this._o);

			// Check if "de-DE" style date is available, if not language should
			// fallback to 2 letter code eg "de"
			var lang = o.language;
			if (!dates[lang]){
				lang = lang.split('-')[0];
				if (!dates[lang])
					lang = defaults.language;
			}
			o.language = lang;

			switch (o.startView){
				case 2:
				case 'decade':
					o.startView = 2;
					break;
				case 1:
				case 'year':
					o.startView = 1;
					break;
				default:
					o.startView = 0;
			}

			switch (o.minViewMode){
				case 1:
				case 'months':
					o.minViewMode = 1;
					break;
				case 2:
				case 'years':
					o.minViewMode = 2;
					break;
				default:
					o.minViewMode = 0;
			}

			o.startView = Math.max(o.startView, o.minViewMode);

			// true, false, or Number > 0
			if (o.multidate !== true){
				o.multidate = Number(o.multidate) || false;
				if (o.multidate !== false)
					o.multidate = Math.max(0, o.multidate);
				else
					o.multidate = 1;
			}
			o.multidateSeparator = String(o.multidateSeparator);

			o.weekStart %= 7;
			o.weekEnd = ((o.weekStart + 6) % 7);

			var format = DPGlobal.parseFormat(o.format);
			if (o.startDate !== -Infinity){
				if (!!o.startDate){
					if (o.startDate instanceof Date)
						o.startDate = this._local_to_utc(this._zero_time(o.startDate));
					else
						o.startDate = DPGlobal.parseDate(o.startDate, format, o.language);
				}
				else {
					o.startDate = -Infinity;
				}
			}
			if (o.endDate !== Infinity){
				if (!!o.endDate){
					if (o.endDate instanceof Date)
						o.endDate = this._local_to_utc(this._zero_time(o.endDate));
					else
						o.endDate = DPGlobal.parseDate(o.endDate, format, o.language);
				}
				else {
					o.endDate = Infinity;
				}
			}

			o.daysOfWeekDisabled = o.daysOfWeekDisabled||[];
			if (!$.isArray(o.daysOfWeekDisabled))
				o.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\s]*/);
			o.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function(d){
				return parseInt(d, 10);
			});

			var plc = String(o.orientation).toLowerCase().split(/\s+/g),
				_plc = o.orientation.toLowerCase();
			plc = $.grep(plc, function(word){
				return (/^auto|left|right|top|bottom$/).test(word);
			});
			o.orientation = {x: 'auto', y: 'auto'};
			if (!_plc || _plc === 'auto')
				; // no action
			else if (plc.length === 1){
				switch (plc[0]){
					case 'top':
					case 'bottom':
						o.orientation.y = plc[0];
						break;
					case 'left':
					case 'right':
						o.orientation.x = plc[0];
						break;
				}
			}
			else {
				_plc = $.grep(plc, function(word){
					return (/^left|right$/).test(word);
				});
				o.orientation.x = _plc[0] || 'auto';

				_plc = $.grep(plc, function(word){
					return (/^top|bottom$/).test(word);
				});
				o.orientation.y = _plc[0] || 'auto';
			}
		},
		_events: [],
		_secondaryEvents: [],
		_applyEvents: function(evs){
			for (var i=0, el, ch, ev; i < evs.length; i++){
				el = evs[i][0];
				if (evs[i].length === 2){
					ch = undefined;
					ev = evs[i][1];
				}
				else if (evs[i].length === 3){
					ch = evs[i][1];
					ev = evs[i][2];
				}
				el.on(ev, ch);
			}
		},
		_unapplyEvents: function(evs){
			for (var i=0, el, ev, ch; i < evs.length; i++){
				el = evs[i][0];
				if (evs[i].length === 2){
					ch = undefined;
					ev = evs[i][1];
				}
				else if (evs[i].length === 3){
					ch = evs[i][1];
					ev = evs[i][2];
				}
				el.off(ev, ch);
			}
		},
		_buildEvents: function(){
			if (this.isInput){ // single input
				this._events = [
					[this.element, {
						focus: $.proxy(this.show, this),
						keyup: $.proxy(function(e){
							if ($.inArray(e.keyCode, [27,37,39,38,40,32,13,9]) === -1)
								this.update();
						}, this),
						keydown: $.proxy(this.keydown, this)
					}]
				];
			}
			else if (this.component && this.hasInput){ // component: input + button
				this._events = [
					// For components that are not readonly, allow keyboard nav
					[this.element.find('input'), {
						focus: $.proxy(this.show, this),
						keyup: $.proxy(function(e){
							if ($.inArray(e.keyCode, [27,37,39,38,40,32,13,9]) === -1)
								this.update();
						}, this),
						keydown: $.proxy(this.keydown, this)
					}],
					[this.component, {
						click: $.proxy(this.show, this)
					}]
				];
			}
			else if (this.element.is('div')){  // inline datepicker
				this.isInline = true;
			}
			else {
				this._events = [
					[this.element, {
						click: $.proxy(this.show, this)
					}]
				];
			}
			this._events.push(
				// Component: listen for blur on element descendants
				[this.element, '*', {
					blur: $.proxy(function(e){
						this._focused_from = e.target;
					}, this)
				}],
				// Input: listen for blur on element
				[this.element, {
					blur: $.proxy(function(e){
						this._focused_from = e.target;
					}, this)
				}]
			);

			this._secondaryEvents = [
				[this.picker, {
					click: $.proxy(this.click, this)
				}],
				[$(window), {
					resize: $.proxy(this.place, this)
				}],
				[$(document), {
					'mousedown touchstart': $.proxy(function(e){
						// Clicked outside the datepicker, hide it
						if (!(
							this.element.is(e.target) ||
							this.element.find(e.target).length ||
							this.picker.is(e.target) ||
							this.picker.find(e.target).length
						)){
							this.hide();
						}
					}, this)
				}]
			];
		},
		_attachEvents: function(){
			this._detachEvents();
			this._applyEvents(this._events);
		},
		_detachEvents: function(){
			this._unapplyEvents(this._events);
		},
		_attachSecondaryEvents: function(){
			this._detachSecondaryEvents();
			this._applyEvents(this._secondaryEvents);
		},
		_detachSecondaryEvents: function(){
			this._unapplyEvents(this._secondaryEvents);
		},
		_trigger: function(event, altdate){
			var date = altdate || this.dates.get(-1),
				local_date = this._utc_to_local(date);

			this.element.trigger({
				type: event,
				date: local_date,
				dates: $.map(this.dates, this._utc_to_local),
				format: $.proxy(function(ix, format){
					if (arguments.length === 0){
						ix = this.dates.length - 1;
						format = this.o.format;
					}
					else if (typeof ix === 'string'){
						format = ix;
						ix = this.dates.length - 1;
					}
					format = format || this.o.format;
					var date = this.dates.get(ix);
					return DPGlobal.formatDate(date, format, this.o.language);
				}, this)
			});
		},

		show: function(){
			if (!this.isInline)
				this.picker.appendTo('body');
			this.picker.show();
			this.place();
			this._attachSecondaryEvents();
			this._trigger('show');
		},

		hide: function(){
			if (this.isInline)
				return;
			if (!this.picker.is(':visible'))
				return;
			this.focusDate = null;
			this.picker.hide().detach();
			this._detachSecondaryEvents();
			this.viewMode = this.o.startView;
			this.showMode();

			if (
				this.o.forceParse &&
				(
					this.isInput && this.element.val() ||
					this.hasInput && this.element.find('input').val()
				)
			)
				this.setValue();
			this._trigger('hide');
		},

		remove: function(){
			this.hide();
			this._detachEvents();
			this._detachSecondaryEvents();
			this.picker.remove();
			delete this.element.data().datepicker;
			if (!this.isInput){
				delete this.element.data().date;
			}
		},

		_utc_to_local: function(utc){
			return utc && new Date(utc.getTime() + (utc.getTimezoneOffset()*60000));
		},
		_local_to_utc: function(local){
			return local && new Date(local.getTime() - (local.getTimezoneOffset()*60000));
		},
		_zero_time: function(local){
			return local && new Date(local.getFullYear(), local.getMonth(), local.getDate());
		},
		_zero_utc_time: function(utc){
			return utc && new Date(Date.UTC(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate()));
		},

		getDates: function(){
			return $.map(this.dates, this._utc_to_local);
		},

		getUTCDates: function(){
			return $.map(this.dates, function(d){
				return new Date(d);
			});
		},

		getDate: function(){
			return this._utc_to_local(this.getUTCDate());
		},

		getUTCDate: function(){
			return new Date(this.dates.get(-1));
		},

		setDates: function(){
			var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
			this.update.apply(this, args);
			this._trigger('changeDate');
			this.setValue();
		},

		setUTCDates: function(){
			var args = $.isArray(arguments[0]) ? arguments[0] : arguments;
			this.update.apply(this, $.map(args, this._utc_to_local));
			this._trigger('changeDate');
			this.setValue();
		},

		setDate: alias('setDates'),
		setUTCDate: alias('setUTCDates'),

		setValue: function(){
			var formatted = this.getFormattedDate();
			if (!this.isInput){
				if (this.component){
					this.element.find('input').val(formatted).change();
				}
			}
			else {
				this.element.val(formatted).change();
			}
		},

		getFormattedDate: function(format){
			if (format === undefined)
				format = this.o.format;

			var lang = this.o.language;
			return $.map(this.dates, function(d){
				return DPGlobal.formatDate(d, format, lang);
			}).join(this.o.multidateSeparator);
		},

		setStartDate: function(startDate){
			this._process_options({startDate: startDate});
			this.update();
			this.updateNavArrows();
		},

		setEndDate: function(endDate){
			this._process_options({endDate: endDate});
			this.update();
			this.updateNavArrows();
		},

		setDaysOfWeekDisabled: function(daysOfWeekDisabled){
			this._process_options({daysOfWeekDisabled: daysOfWeekDisabled});
			this.update();
			this.updateNavArrows();
		},

		place: function(){
			if (this.isInline)
				return;
			var calendarWidth = this.picker.outerWidth(),
				calendarHeight = this.picker.outerHeight(),
				visualPadding = 10,
				windowWidth = $window.width(),
				windowHeight = $window.height(),
				scrollTop = $window.scrollTop();

			var zIndex = parseInt(this.element.parents().filter(function(){
					return $(this).css('z-index') !== 'auto';
				}).first().css('z-index'))+10;
			var offset = this.component ? this.component.parent().offset() : this.element.offset();
			var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);
			var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);
			var left = offset.left,
				top = offset.top;

			this.picker.removeClass(
				'datepicker-orient-top datepicker-orient-bottom '+
				'datepicker-orient-right datepicker-orient-left'
			);

			if (this.o.orientation.x !== 'auto'){
				this.picker.addClass('datepicker-orient-' + this.o.orientation.x);
				if (this.o.orientation.x === 'right')
					left -= calendarWidth - width;
			}
			// auto x orientation is best-placement: if it crosses a window
			// edge, fudge it sideways
			else {
				// Default to left
				this.picker.addClass('datepicker-orient-left');
				if (offset.left < 0)
					left -= offset.left - visualPadding;
				else if (offset.left + calendarWidth > windowWidth)
					left = windowWidth - calendarWidth - visualPadding;
			}

			// auto y orientation is best-situation: top or bottom, no fudging,
			// decision based on which shows more of the calendar
			var yorient = this.o.orientation.y,
				top_overflow, bottom_overflow;
			if (yorient === 'auto'){
				top_overflow = -scrollTop + offset.top - calendarHeight;
				bottom_overflow = scrollTop + windowHeight - (offset.top + height + calendarHeight);
				if (Math.max(top_overflow, bottom_overflow) === bottom_overflow)
					yorient = 'top';
				else
					yorient = 'bottom';
			}
			this.picker.addClass('datepicker-orient-' + yorient);
			if (yorient === 'top')
				top += height;
			else
				top -= calendarHeight + parseInt(this.picker.css('padding-top'));

			this.picker.css({
				top: top,
				left: left,
				zIndex: zIndex
			});
		},

		_allow_update: true,
		update: function(){
			if (!this._allow_update)
				return;

			var oldDates = this.dates.copy(),
				dates = [],
				fromArgs = false;
			if (arguments.length){
				$.each(arguments, $.proxy(function(i, date){
					if (date instanceof Date)
						date = this._local_to_utc(date);
					dates.push(date);
				}, this));
				fromArgs = true;
			}
			else {
				dates = this.isInput
						? this.element.val()
						: this.element.data('date') || this.element.find('input').val();
				if (dates && this.o.multidate)
					dates = dates.split(this.o.multidateSeparator);
				else
					dates = [dates];
				delete this.element.data().date;
			}

			dates = $.map(dates, $.proxy(function(date){
				return DPGlobal.parseDate(date, this.o.format, this.o.language);
			}, this));
			dates = $.grep(dates, $.proxy(function(date){
				return (
					date < this.o.startDate ||
					date > this.o.endDate ||
					!date
				);
			}, this), true);
			this.dates.replace(dates);

			if (this.dates.length)
				this.viewDate = new Date(this.dates.get(-1));
			else if (this.viewDate < this.o.startDate)
				this.viewDate = new Date(this.o.startDate);
			else if (this.viewDate > this.o.endDate)
				this.viewDate = new Date(this.o.endDate);

			if (fromArgs){
				// setting date by clicking
				this.setValue();
			}
			else if (dates.length){
				// setting date by typing
				if (String(oldDates) !== String(this.dates))
					this._trigger('changeDate');
			}
			if (!this.dates.length && oldDates.length)
				this._trigger('clearDate');

			this.fill();
		},

		fillDow: function(){
			var dowCnt = this.o.weekStart,
				html = '<tr>';
			if (this.o.calendarWeeks){
				var cell = '<th class="cw">&nbsp;</th>';
				html += cell;
				this.picker.find('.datepicker-days thead tr:first-child').prepend(cell);
			}
			while (dowCnt < this.o.weekStart + 7){
				html += '<th class="dow">'+dates[this.o.language].daysMin[(dowCnt++)%7]+'</th>';
			}
			html += '</tr>';
			this.picker.find('.datepicker-days thead').append(html);
		},

		fillMonths: function(){
			var html = '',
			i = 0;
			while (i < 12){
				html += '<span class="month">'+dates[this.o.language].monthsShort[i++]+'</span>';
			}
			this.picker.find('.datepicker-months td').html(html);
		},

		setRange: function(range){
			if (!range || !range.length)
				delete this.range;
			else
				this.range = $.map(range, function(d){
					return d.valueOf();
				});
			this.fill();
		},

		getClassNames: function(date){
			var cls = [],
				year = this.viewDate.getUTCFullYear(),
				month = this.viewDate.getUTCMonth(),
				today = new Date();
			if (date.getUTCFullYear() < year || (date.getUTCFullYear() === year && date.getUTCMonth() < month)){
				cls.push('old');
			}
			else if (date.getUTCFullYear() > year || (date.getUTCFullYear() === year && date.getUTCMonth() > month)){
				cls.push('new');
			}
			if (this.focusDate && date.valueOf() === this.focusDate.valueOf())
				cls.push('focused');
			// Compare internal UTC date with local today, not UTC today
			if (this.o.todayHighlight &&
				date.getUTCFullYear() === today.getFullYear() &&
				date.getUTCMonth() === today.getMonth() &&
				date.getUTCDate() === today.getDate()){
				cls.push('today');
			}
			if (this.dates.contains(date) !== -1)
				cls.push('active');
			if (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate ||
				$.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1){
				cls.push('disabled');
			}
			if (this.range){
				if (date > this.range[0] && date < this.range[this.range.length-1]){
					cls.push('range');
				}
				if ($.inArray(date.valueOf(), this.range) !== -1){
					cls.push('selected');
				}
			}
			return cls;
		},

		fill: function(){
			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth(),
				startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,
				startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,
				endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,
				endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,
				todaytxt = dates[this.o.language].today || dates['en'].today || '',
				cleartxt = dates[this.o.language].clear || dates['en'].clear || '',
				tooltip;
			this.picker.find('.datepicker-days thead th.datepicker-switch')
						.text(dates[this.o.language].months[month]+' '+year);
			this.picker.find('tfoot th.today')
						.text(todaytxt)
						.toggle(this.o.todayBtn !== false);
			this.picker.find('tfoot th.clear')
						.text(cleartxt)
						.toggle(this.o.clearBtn !== false);
			this.updateNavArrows();
			this.fillMonths();
			var prevMonth = UTCDate(year, month-1, 28),
				day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
			prevMonth.setUTCDate(day);
			prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);
			var nextMonth = new Date(prevMonth);
			nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
			nextMonth = nextMonth.valueOf();
			var html = [];
			var clsName;
			while (prevMonth.valueOf() < nextMonth){
				if (prevMonth.getUTCDay() === this.o.weekStart){
					html.push('<tr>');
					if (this.o.calendarWeeks){
						// ISO 8601: First week contains first thursday.
						// ISO also states week starts on Monday, but we can be more abstract here.
						var
							// Start of current week: based on weekstart/current date
							ws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),
							// Thursday of this week
							th = new Date(Number(ws) + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),
							// First Thursday of year, year from thursday
							yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7*864e5),
							// Calendar week: ms between thursdays, div ms per day, div 7 days
							calWeek =  (th - yth) / 864e5 / 7 + 1;
						html.push('<td class="cw">'+ calWeek +'</td>');

					}
				}
				clsName = this.getClassNames(prevMonth);
				clsName.push('day');

				if (this.o.beforeShowDay !== $.noop){
					var before = this.o.beforeShowDay(this._utc_to_local(prevMonth));
					if (before === undefined)
						before = {};
					else if (typeof(before) === 'boolean')
						before = {enabled: before};
					else if (typeof(before) === 'string')
						before = {classes: before};
					if (before.enabled === false)
						clsName.push('disabled');
					if (before.classes)
						clsName = clsName.concat(before.classes.split(/\s+/));
					if (before.tooltip)
						tooltip = before.tooltip;
				}

				clsName = $.unique(clsName);
				html.push('<td class="'+clsName.join(' ')+'"' + (tooltip ? ' title="'+tooltip+'"' : '') + '>'+prevMonth.getUTCDate() + '</td>');
				if (prevMonth.getUTCDay() === this.o.weekEnd){
					html.push('</tr>');
				}
				prevMonth.setUTCDate(prevMonth.getUTCDate()+1);
			}
			this.picker.find('.datepicker-days tbody').empty().append(html.join(''));

			var months = this.picker.find('.datepicker-months')
						.find('th:eq(1)')
							.text(year)
							.end()
						.find('span').removeClass('active');

			$.each(this.dates, function(i, d){
				if (d.getUTCFullYear() === year)
					months.eq(d.getUTCMonth()).addClass('active');
			});

			if (year < startYear || year > endYear){
				months.addClass('disabled');
			}
			if (year === startYear){
				months.slice(0, startMonth).addClass('disabled');
			}
			if (year === endYear){
				months.slice(endMonth+1).addClass('disabled');
			}

			html = '';
			year = parseInt(year/10, 10) * 10;
			var yearCont = this.picker.find('.datepicker-years')
								.find('th:eq(1)')
									.text(year + '-' + (year + 9))
									.end()
								.find('td');
			year -= 1;
			var years = $.map(this.dates, function(d){
					return d.getUTCFullYear();
				}),
				classes;
			for (var i = -1; i < 11; i++){
				classes = ['year'];
				if (i === -1)
					classes.push('old');
				else if (i === 10)
					classes.push('new');
				if ($.inArray(year, years) !== -1)
					classes.push('active');
				if (year < startYear || year > endYear)
					classes.push('disabled');
				html += '<span class="' + classes.join(' ') + '">'+year+'</span>';
				year += 1;
			}
			yearCont.html(html);
		},

		updateNavArrows: function(){
			if (!this._allow_update)
				return;

			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth();
			switch (this.viewMode){
				case 0:
					if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()){
						this.picker.find('.prev').css({visibility: 'hidden'});
					}
					else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()){
						this.picker.find('.next').css({visibility: 'hidden'});
					}
					else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 1:
				case 2:
					if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear()){
						this.picker.find('.prev').css({visibility: 'hidden'});
					}
					else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear()){
						this.picker.find('.next').css({visibility: 'hidden'});
					}
					else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
			}
		},

		click: function(e){
			e.preventDefault();
			var target = $(e.target).closest('span, td, th'),
				year, month, day;
			if (target.length === 1){
				switch (target[0].nodeName.toLowerCase()){
					case 'th':
						switch (target[0].className){
							case 'datepicker-switch':
								this.showMode(1);
								break;
							case 'prev':
							case 'next':
								var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className === 'prev' ? -1 : 1);
								switch (this.viewMode){
									case 0:
										this.viewDate = this.moveMonth(this.viewDate, dir);
										this._trigger('changeMonth', this.viewDate);
										break;
									case 1:
									case 2:
										this.viewDate = this.moveYear(this.viewDate, dir);
										if (this.viewMode === 1)
											this._trigger('changeYear', this.viewDate);
										break;
								}
								this.fill();
								break;
							case 'today':
								var date = new Date();
								date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);

								this.showMode(-2);
								var which = this.o.todayBtn === 'linked' ? null : 'view';
								this._setDate(date, which);
								break;
							case 'clear':
								var element;
								if (this.isInput)
									element = this.element;
								else if (this.component)
									element = this.element.find('input');
								if (element)
									element.val("").change();
								this.update();
								this._trigger('changeDate');
								if (this.o.autoclose)
									this.hide();
								break;
						}
						break;
					case 'span':
						if (!target.is('.disabled')){
							this.viewDate.setUTCDate(1);
							if (target.is('.month')){
								day = 1;
								month = target.parent().find('span').index(target);
								year = this.viewDate.getUTCFullYear();
								this.viewDate.setUTCMonth(month);
								this._trigger('changeMonth', this.viewDate);
								if (this.o.minViewMode === 1){
									this._setDate(UTCDate(year, month, day));
								}
							}
							else {
								day = 1;
								month = 0;
								year = parseInt(target.text(), 10)||0;
								this.viewDate.setUTCFullYear(year);
								this._trigger('changeYear', this.viewDate);
								if (this.o.minViewMode === 2){
									this._setDate(UTCDate(year, month, day));
								}
							}
							this.showMode(-1);
							this.fill();
						}
						break;
					case 'td':
						if (target.is('.day') && !target.is('.disabled')){
							day = parseInt(target.text(), 10)||1;
							year = this.viewDate.getUTCFullYear();
							month = this.viewDate.getUTCMonth();
							if (target.is('.old')){
								if (month === 0){
									month = 11;
									year -= 1;
								}
								else {
									month -= 1;
								}
							}
							else if (target.is('.new')){
								if (month === 11){
									month = 0;
									year += 1;
								}
								else {
									month += 1;
								}
							}
							this._setDate(UTCDate(year, month, day));
						}
						break;
				}
			}
			if (this.picker.is(':visible') && this._focused_from){
				$(this._focused_from).focus();
			}
			delete this._focused_from;
		},

		_toggle_multidate: function(date){
			var ix = this.dates.contains(date);
			if (!date){
				this.dates.clear();
			}
			else if (ix !== -1){
				this.dates.remove(ix);
			}
			else {
				this.dates.push(date);
			}
			if (typeof this.o.multidate === 'number')
				while (this.dates.length > this.o.multidate)
					this.dates.remove(0);
		},

		_setDate: function(date, which){
			if (!which || which === 'date')
				this._toggle_multidate(date && new Date(date));
			if (!which || which  === 'view')
				this.viewDate = date && new Date(date);

			this.fill();
			this.setValue();
			this._trigger('changeDate');
			var element;
			if (this.isInput){
				element = this.element;
			}
			else if (this.component){
				element = this.element.find('input');
			}
			if (element){
				element.change();
			}
			if (this.o.autoclose && (!which || which === 'date')){
				this.hide();
			}
		},

		moveMonth: function(date, dir){
			if (!date)
				return undefined;
			if (!dir)
				return date;
			var new_date = new Date(date.valueOf()),
				day = new_date.getUTCDate(),
				month = new_date.getUTCMonth(),
				mag = Math.abs(dir),
				new_month, test;
			dir = dir > 0 ? 1 : -1;
			if (mag === 1){
				test = dir === -1
					// If going back one month, make sure month is not current month
					// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
					? function(){
						return new_date.getUTCMonth() === month;
					}
					// If going forward one month, make sure month is as expected
					// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
					: function(){
						return new_date.getUTCMonth() !== new_month;
					};
				new_month = month + dir;
				new_date.setUTCMonth(new_month);
				// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
				if (new_month < 0 || new_month > 11)
					new_month = (new_month + 12) % 12;
			}
			else {
				// For magnitudes >1, move one month at a time...
				for (var i=0; i < mag; i++)
					// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
					new_date = this.moveMonth(new_date, dir);
				// ...then reset the day, keeping it in the new month
				new_month = new_date.getUTCMonth();
				new_date.setUTCDate(day);
				test = function(){
					return new_month !== new_date.getUTCMonth();
				};
			}
			// Common date-resetting loop -- if date is beyond end of month, make it
			// end of month
			while (test()){
				new_date.setUTCDate(--day);
				new_date.setUTCMonth(new_month);
			}
			return new_date;
		},

		moveYear: function(date, dir){
			return this.moveMonth(date, dir*12);
		},

		dateWithinRange: function(date){
			return date >= this.o.startDate && date <= this.o.endDate;
		},

		keydown: function(e){
			if (this.picker.is(':not(:visible)')){
				if (e.keyCode === 27) // allow escape to hide and re-show picker
					this.show();
				return;
			}
			var dateChanged = false,
				dir, newDate, newViewDate,
				focusDate = this.focusDate || this.viewDate;
			switch (e.keyCode){
				case 27: // escape
					if (this.focusDate){
						this.focusDate = null;
						this.viewDate = this.dates.get(-1) || this.viewDate;
						this.fill();
					}
					else
						this.hide();
					e.preventDefault();
					break;
				case 37: // left
				case 39: // right
					if (!this.o.keyboardNavigation)
						break;
					dir = e.keyCode === 37 ? -1 : 1;
					if (e.ctrlKey){
						newDate = this.moveYear(this.dates.get(-1) || UTCToday(), dir);
						newViewDate = this.moveYear(focusDate, dir);
						this._trigger('changeYear', this.viewDate);
					}
					else if (e.shiftKey){
						newDate = this.moveMonth(this.dates.get(-1) || UTCToday(), dir);
						newViewDate = this.moveMonth(focusDate, dir);
						this._trigger('changeMonth', this.viewDate);
					}
					else {
						newDate = new Date(this.dates.get(-1) || UTCToday());
						newDate.setUTCDate(newDate.getUTCDate() + dir);
						newViewDate = new Date(focusDate);
						newViewDate.setUTCDate(focusDate.getUTCDate() + dir);
					}
					if (this.dateWithinRange(newDate)){
						this.focusDate = this.viewDate = newViewDate;
						this.setValue();
						this.fill();
						e.preventDefault();
					}
					break;
				case 38: // up
				case 40: // down
					if (!this.o.keyboardNavigation)
						break;
					dir = e.keyCode === 38 ? -1 : 1;
					if (e.ctrlKey){
						newDate = this.moveYear(this.dates.get(-1) || UTCToday(), dir);
						newViewDate = this.moveYear(focusDate, dir);
						this._trigger('changeYear', this.viewDate);
					}
					else if (e.shiftKey){
						newDate = this.moveMonth(this.dates.get(-1) || UTCToday(), dir);
						newViewDate = this.moveMonth(focusDate, dir);
						this._trigger('changeMonth', this.viewDate);
					}
					else {
						newDate = new Date(this.dates.get(-1) || UTCToday());
						newDate.setUTCDate(newDate.getUTCDate() + dir * 7);
						newViewDate = new Date(focusDate);
						newViewDate.setUTCDate(focusDate.getUTCDate() + dir * 7);
					}
					if (this.dateWithinRange(newDate)){
						this.focusDate = this.viewDate = newViewDate;
						this.setValue();
						this.fill();
						e.preventDefault();
					}
					break;
				case 32: // spacebar
					// Spacebar is used in manually typing dates in some formats.
					// As such, its behavior should not be hijacked.
					break;
				case 13: // enter
					focusDate = this.focusDate || this.dates.get(-1) || this.viewDate;
					this._toggle_multidate(focusDate);
					dateChanged = true;
					this.focusDate = null;
					this.viewDate = this.dates.get(-1) || this.viewDate;
					this.setValue();
					this.fill();
					if (this.picker.is(':visible')){
						e.preventDefault();
						if (this.o.autoclose)
							this.hide();
					}
					break;
				case 9: // tab
					this.focusDate = null;
					this.viewDate = this.dates.get(-1) || this.viewDate;
					this.fill();
					this.hide();
					break;
			}
			if (dateChanged){
				if (this.dates.length)
					this._trigger('changeDate');
				else
					this._trigger('clearDate');
				var element;
				if (this.isInput){
					element = this.element;
				}
				else if (this.component){
					element = this.element.find('input');
				}
				if (element){
					element.change();
				}
			}
		},

		showMode: function(dir){
			if (dir){
				this.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir));
			}
			this.picker
				.find('>div')
				.hide()
				.filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName)
					.css('display', 'block');
			this.updateNavArrows();
		}
	};

	var DateRangePicker = function(element, options){
		this.element = $(element);
		this.inputs = $.map(options.inputs, function(i){
			return i.jquery ? i[0] : i;
		});
		delete options.inputs;

		$(this.inputs)
			.datepicker(options)
			.bind('changeDate', $.proxy(this.dateUpdated, this));

		this.pickers = $.map(this.inputs, function(i){
			return $(i).data('datepicker');
		});
		this.updateDates();
	};
	DateRangePicker.prototype = {
		updateDates: function(){
			this.dates = $.map(this.pickers, function(i){
				return i.getUTCDate();
			});
			this.updateRanges();
		},
		updateRanges: function(){
			var range = $.map(this.dates, function(d){
				return d.valueOf();
			});
			$.each(this.pickers, function(i, p){
				p.setRange(range);
			});
		},
		dateUpdated: function(e){
			// `this.updating` is a workaround for preventing infinite recursion
			// between `changeDate` triggering and `setUTCDate` calling.  Until
			// there is a better mechanism.
			if (this.updating)
				return;
			this.updating = true;

			var dp = $(e.target).data('datepicker'),
				new_date = dp.getUTCDate(),
				i = $.inArray(e.target, this.inputs),
				l = this.inputs.length;
			if (i === -1)
				return;

			$.each(this.pickers, function(i, p){
				if (!p.getUTCDate())
					p.setUTCDate(new_date);
			});

			if (new_date < this.dates[i]){
				// Date being moved earlier/left
				while (i >= 0 && new_date < this.dates[i]){
					this.pickers[i--].setUTCDate(new_date);
				}
			}
			else if (new_date > this.dates[i]){
				// Date being moved later/right
				while (i < l && new_date > this.dates[i]){
					this.pickers[i++].setUTCDate(new_date);
				}
			}
			this.updateDates();

			delete this.updating;
		},
		remove: function(){
			$.map(this.pickers, function(p){ p.remove(); });
			delete this.element.data().datepicker;
		}
	};

	function opts_from_el(el, prefix){
		// Derive options from element data-attrs
		var data = $(el).data(),
			out = {}, inkey,
			replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])');
		prefix = new RegExp('^' + prefix.toLowerCase());
		function re_lower(_,a){
			return a.toLowerCase();
		}
		for (var key in data)
			if (prefix.test(key)){
				inkey = key.replace(replace, re_lower);
				out[inkey] = data[key];
			}
		return out;
	}

	function opts_from_locale(lang){
		// Derive options from locale plugins
		var out = {};
		// Check if "de-DE" style date is available, if not language should
		// fallback to 2 letter code eg "de"
		if (!dates[lang]){
			lang = lang.split('-')[0];
			if (!dates[lang])
				return;
		}
		var d = dates[lang];
		$.each(locale_opts, function(i,k){
			if (k in d)
				out[k] = d[k];
		});
		return out;
	}

	var old = $.fn.datepicker;
	$.fn.datepicker = function(option){
		var args = Array.apply(null, arguments);
		args.shift();
		var internal_return;
		this.each(function(){
			var $this = $(this),
				data = $this.data('datepicker'),
				options = typeof option === 'object' && option;
			if (!data){
				var elopts = opts_from_el(this, 'date'),
					// Preliminary otions
					xopts = $.extend({}, defaults, elopts, options),
					locopts = opts_from_locale(xopts.language),
					// Options priority: js args, data-attrs, locales, defaults
					opts = $.extend({}, defaults, locopts, elopts, options);
				if ($this.is('.input-daterange') || opts.inputs){
					var ropts = {
						inputs: opts.inputs || $this.find('input').toArray()
					};
					$this.data('datepicker', (data = new DateRangePicker(this, $.extend(opts, ropts))));
				}
				else {
					$this.data('datepicker', (data = new Datepicker(this, opts)));
				}
			}
			if (typeof option === 'string' && typeof data[option] === 'function'){
				internal_return = data[option].apply(data, args);
				if (internal_return !== undefined)
					return false;
			}
		});
		if (internal_return !== undefined)
			return internal_return;
		else
			return this;
	};

	var defaults = $.fn.datepicker.defaults = {
		autoclose: false,
		beforeShowDay: $.noop,
		calendarWeeks: false,
		clearBtn: false,
		daysOfWeekDisabled: [],
		endDate: Infinity,
		forceParse: true,
		format: 'mm/dd/yyyy',
		keyboardNavigation: true,
		language: 'en',
		minViewMode: 0,
		multidate: false,
		multidateSeparator: ',',
		orientation: "auto",
		rtl: false,
		startDate: -Infinity,
		startView: 0,
		todayBtn: false,
		todayHighlight: false,
		weekStart: 0
	};
	var locale_opts = $.fn.datepicker.locale_opts = [
		'format',
		'rtl',
		'weekStart'
	];
	$.fn.datepicker.Constructor = Datepicker;
	var dates = $.fn.datepicker.dates = {
		en: {
			days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
			daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
			daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
			months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			today: "Today",
			clear: "Clear"
		}
	};

	var DPGlobal = {
		modes: [
			{
				clsName: 'days',
				navFnc: 'Month',
				navStep: 1
			},
			{
				clsName: 'months',
				navFnc: 'FullYear',
				navStep: 1
			},
			{
				clsName: 'years',
				navFnc: 'FullYear',
				navStep: 10
		}],
		isLeapYear: function(year){
			return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
		},
		getDaysInMonth: function(year, month){
			return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
		},
		validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
		nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,
		parseFormat: function(format){
			// IE treats \0 as a string end in inputs (truncating the value),
			// so it's a bad format delimiter, anyway
			var separators = format.replace(this.validParts, '\0').split('\0'),
				parts = format.match(this.validParts);
			if (!separators || !separators.length || !parts || parts.length === 0){
				throw new Error("Invalid date format.");
			}
			return {separators: separators, parts: parts};
		},
		parseDate: function(date, format, language){
			if (!date)
				return undefined;
			if (date instanceof Date)
				return date;
			if (typeof format === 'string')
				format = DPGlobal.parseFormat(format);
			var part_re = /([\-+]\d+)([dmwy])/,
				parts = date.match(/([\-+]\d+)([dmwy])/g),
				part, dir, i;
			if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)){
				date = new Date();
				for (i=0; i < parts.length; i++){
					part = part_re.exec(parts[i]);
					dir = parseInt(part[1]);
					switch (part[2]){
						case 'd':
							date.setUTCDate(date.getUTCDate() + dir);
							break;
						case 'm':
							date = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);
							break;
						case 'w':
							date.setUTCDate(date.getUTCDate() + dir * 7);
							break;
						case 'y':
							date = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);
							break;
					}
				}
				return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);
			}
			parts = date && date.match(this.nonpunctuation) || [];
			date = new Date();
			var parsed = {},
				setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],
				setters_map = {
					yyyy: function(d,v){
						return d.setUTCFullYear(v);
					},
					yy: function(d,v){
						return d.setUTCFullYear(2000+v);
					},
					m: function(d,v){
						if (isNaN(d))
							return d;
						v -= 1;
						while (v < 0) v += 12;
						v %= 12;
						d.setUTCMonth(v);
						while (d.getUTCMonth() !== v)
							d.setUTCDate(d.getUTCDate()-1);
						return d;
					},
					d: function(d,v){
						return d.setUTCDate(v);
					}
				},
				val, filtered;
			setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
			setters_map['dd'] = setters_map['d'];
			date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
			var fparts = format.parts.slice();
			// Remove noop parts
			if (parts.length !== fparts.length){
				fparts = $(fparts).filter(function(i,p){
					return $.inArray(p, setters_order) !== -1;
				}).toArray();
			}
			// Process remainder
			function match_part(){
				var m = this.slice(0, parts[i].length),
					p = parts[i].slice(0, m.length);
				return m === p;
			}
			if (parts.length === fparts.length){
				var cnt;
				for (i=0, cnt = fparts.length; i < cnt; i++){
					val = parseInt(parts[i], 10);
					part = fparts[i];
					if (isNaN(val)){
						switch (part){
							case 'MM':
								filtered = $(dates[language].months).filter(match_part);
								val = $.inArray(filtered[0], dates[language].months) + 1;
								break;
							case 'M':
								filtered = $(dates[language].monthsShort).filter(match_part);
								val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
								break;
						}
					}
					parsed[part] = val;
				}
				var _date, s;
				for (i=0; i < setters_order.length; i++){
					s = setters_order[i];
					if (s in parsed && !isNaN(parsed[s])){
						_date = new Date(date);
						setters_map[s](_date, parsed[s]);
						if (!isNaN(_date))
							date = _date;
					}
				}
			}
			return date;
		},
		formatDate: function(date, format, language){
			if (!date)
				return '';
			if (typeof format === 'string')
				format = DPGlobal.parseFormat(format);
			var val = {
				d: date.getUTCDate(),
				D: dates[language].daysShort[date.getUTCDay()],
				DD: dates[language].days[date.getUTCDay()],
				m: date.getUTCMonth() + 1,
				M: dates[language].monthsShort[date.getUTCMonth()],
				MM: dates[language].months[date.getUTCMonth()],
				yy: date.getUTCFullYear().toString().substring(2),
				yyyy: date.getUTCFullYear()
			};
			val.dd = (val.d < 10 ? '0' : '') + val.d;
			val.mm = (val.m < 10 ? '0' : '') + val.m;
			date = [];
			var seps = $.extend([], format.separators);
			for (var i=0, cnt = format.parts.length; i <= cnt; i++){
				if (seps.length)
					date.push(seps.shift());
				date.push(val[format.parts[i]]);
			}
			return date.join('');
		},
		headTemplate: '<thead>'+
							'<tr>'+
								'<th class="prev">&laquo;</th>'+
								'<th colspan="5" class="datepicker-switch"></th>'+
								'<th class="next">&raquo;</th>'+
							'</tr>'+
						'</thead>',
		contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
		footTemplate: '<tfoot>'+
							'<tr>'+
								'<th colspan="7" class="today"></th>'+
							'</tr>'+
							'<tr>'+
								'<th colspan="7" class="clear"></th>'+
							'</tr>'+
						'</tfoot>'
	};
	DPGlobal.template = '<div class="datepicker">'+
							'<div class="datepicker-days">'+
								'<table class=" table-condensed">'+
									DPGlobal.headTemplate+
									'<tbody></tbody>'+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
							'<div class="datepicker-months">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									DPGlobal.contTemplate+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
							'<div class="datepicker-years">'+
								'<table class="table-condensed">'+
									DPGlobal.headTemplate+
									DPGlobal.contTemplate+
									DPGlobal.footTemplate+
								'</table>'+
							'</div>'+
						'</div>';

	$.fn.datepicker.DPGlobal = DPGlobal;


	/* DATEPICKER NO CONFLICT
	* =================== */

	$.fn.datepicker.noConflict = function(){
		$.fn.datepicker = old;
		return this;
	};


	/* DATEPICKER DATA-API
	* ================== */

	$(document).on(
		'focus.datepicker.data-api click.datepicker.data-api',
		'[data-provide="datepicker"]',
		function(e){
			var $this = $(this);
			if ($this.data('datepicker'))
				return;
			e.preventDefault();
			// component click requires us to explicitly show it
			$this.datepicker('show');
		}
	);
	$(function(){
		$('[data-provide="datepicker-inline"]').datepicker();
	});

}(window.jQuery));

'use strict';
(function(angular){
    'use strict';

    var Module = angular.module('datePicker');

    var datePickerConfig = {
        template: 'templates/datepicker.html',
        view: 'month',
        views: ['year', 'month', 'date', 'hours', 'minutes'],
        step: 5
    }

    Module.constant('datePickerConfig', datePickerConfig);


    Module.filter('time',function () {
        function format(date){
            return ('0' + date.getHours()).slice(-2) + ':' + ('0' + date.getMinutes()).slice(-2);
        }

        return function (date) {
            if (!(date instanceof Date)) {
                date = new Date(date);
                if (isNaN(date.getTime())) {
                    return undefined;
                }
            }
            return format(date);
        };
    });

    function getVisibleMinutes(date, step) {
        date = new Date(date || new Date());
        date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours());
        var minutes = [];
        var stop = date.getTime() + 60 * 60 * 1000;
        while (date.getTime() < stop) {
            minutes.push(date);
            date = new Date(date.getTime() + step * 60 * 1000);
        }
        return minutes;
    }

    function getVisibleWeeks(date) {
        date = new Date(date || new Date());
        var startMonth = date.getMonth(), startYear = date.getYear();
        date.setDate(1);
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);

        if (date.getDay() === 0) {
            date.setDate(-5);
        } else {
            date.setDate(date.getDate() - (date.getDay() - 1));
        }
        if (date.getDate() === 1) {
            date.setDate(-6);
        }

        var weeks = [];
        while (weeks.length < 6) {
            /*jshint -W116 */
            if(date.getYear()=== startYear && date.getMonth() > startMonth) break;
            var week = [];
            for (var i = 0; i < 7; i++) {
                week.push(new Date(date));
                date.setDate(date.getDate() + 1);
            }
            weeks.push(week);
        }
        return weeks;
    }

    function getVisibleYears(date) {
        var years = [];
        date = new Date(date || new Date());
        date.setFullYear(date.getFullYear() - (date.getFullYear() % 10));
        for (var i = 0; i < 12; i++) {
            years.push(new Date(date.getFullYear() + (i - 1), 0, 1));
        }
        return years;
    }

    function getDaysOfWeek(date) {
        date = new Date(date || new Date());
        date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
        date.setDate(date.getDate() - (date.getDay() - 1));
        var days = [];
        for (var i = 0; i < 7; i++) {
            days.push(new Date(date));
            date.setDate(date.getDate() + 1);
        }
        return days;
    }

    function getVisibleMonths(date) {
        date = new Date(date || new Date());
        var year = date.getFullYear();
        var months = [];
        for (var month = 0; month < 12; month++) {
            months.push(new Date(year, month, 1));
        }
        return months;
    }

    function getVisibleHours(date) {
        date = new Date(date || new Date());
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);
        var hours = [];
        for (var i = 0; i < 24; i++) {
            hours.push(date);
            date = new Date(date.getTime() + 60 * 60 * 1000);
        }
        return hours;
    }


    function isAfter(model, date) {
        return model && model.getTime() <= date.getTime();
    }

    function isBefore(model, date) {
        return model.getTime() >= date.getTime();
    }

    function isSameYear(model, date) {
        return model && model.getFullYear() === date.getFullYear();
    }

    function isSameMonth(model, date) {
        return isSameYear(model, date) && model.getMonth() === date.getMonth();
    }

    function isSameDay(model, date) {
        return isSameMonth(model, date) && model.getDate() === date.getDate();
    }

    function isSameHour(model, date) {
        return isSameDay(model, date) && model.getHours() === date.getHours();
    }

    function isSameMinutes(model, date) {
        return isSameHour(model, date) && model.getMinutes() === date.getMinutes();
    }



    Module.directive('datePicker', ['datePickerConfig', function datePickerDirective(datePickerConfig) {

        //noinspection JSUnusedLocalSymbols
        return {
            // this is a bug ?
            template: '<div ng-include="template"></div>',
            scope: {
                model: '=datePicker',
                after: '=?',
                before: '=?'
            },
            link: function (scope, element, attrs) {

                scope.date = new Date(scope.model || new Date());
                scope.views = datePickerConfig.views.concat();
                scope.view = attrs.view || datePickerConfig.view;
                scope.now = new Date();
                scope.template = attrs.template || datePickerConfig.template;

                var step = parseInt(attrs.step || datePickerConfig.step, 10);
                var partial = !!attrs.partial;

                /** @namespace attrs.minView, attrs.maxView */
                scope.views =scope.views.slice(
                    scope.views.indexOf(attrs.maxView || 'year'),
                    scope.views.indexOf(attrs.minView || 'minutes')+1
                );

                if (scope.views.length === 1 || scope.views.indexOf(scope.view)===-1) {
                    scope.view = scope.views[0];
                }

                scope.setView = function (nextView) {
                    if (scope.views.indexOf(nextView) !== -1) {
                        scope.view = nextView;
                    }
                };

                scope.setDate = function (date) {
                    if(attrs.disabled) {
                        return;
                    }
                    scope.date = date;
                    // change next view
                    var nextView = scope.views[scope.views.indexOf(scope.view) + 1];
                    if ((!nextView || partial) || scope.model) {

                        scope.model = new Date(scope.model || date);
                        var view = partial ? 'minutes' : scope.view;
                        //noinspection FallThroughInSwitchStatementJS
                        switch (view) {
                            case 'minutes':
                                scope.model.setMinutes(date.getMinutes());
                            /*falls through*/
                            case 'hours':
                                scope.model.setHours(date.getHours());
                            /*falls through*/
                            case 'date':
                                scope.model.setDate(date.getDate());
                            /*falls through*/
                            case 'month':
                                scope.model.setMonth(date.getMonth());
                            /*falls through*/
                            case 'year':
                                scope.model.setFullYear(date.getFullYear());
                        }
                        scope.$emit('setDate', scope.model, scope.view);
                    }

                    if (nextView) {
                        scope.setView(nextView);
                    }
                };

                function update() {
                    var view = scope.view;
                    var date = scope.date;
                    switch (view) {
                        case 'year':
                            scope.years = getVisibleYears(date);
                            break;
                        case 'month':
                            scope.months = getVisibleMonths(date);
                            break;
                        case 'date':
                            scope.weekdays = scope.weekdays || getDaysOfWeek();
                            scope.weeks = getVisibleWeeks(date);
                            break;
                        case 'hours':
                            scope.hours = getVisibleHours(date);
                            break;
                        case 'minutes':
                            scope.minutes = getVisibleMinutes(date, step);
                            break;
                    }
                }

                function watch() {
                    if (scope.view !== 'date') {
                        return scope.view;
                    }
                    return scope.model ? scope.model.getMonth() : null;
                }


                scope.$watch(watch, update);

                scope.next = function (delta) {
                    var date = scope.date;
                    delta = delta || 1;
                    switch (scope.view) {
                        case 'year':
                        /*falls through*/
                        case 'month':
                            date.setFullYear(date.getFullYear() + delta);
                            break;
                        case 'date':
                            date.setMonth(date.getMonth() + delta);
                            break;
                        case 'hours':
                        /*falls through*/
                        case 'minutes':
                            date.setHours(date.getHours() + delta);
                            break;
                    }
                    update();
                };

                scope.prev = function (delta) {
                    return scope.next(-delta || -1);
                };

                scope.isAfter = function (date) {
                    return scope.after && isAfter(date, scope.after);
                };

                scope.isBefore = function (date) {
                    return scope.before && isBefore(date, scope.before);
                };

                scope.isSameMonth = function (date) {
                    return isSameMonth(scope.model, date);
                };

                scope.isSameYear = function (date) {
                    return isSameYear(scope.model, date);
                };

                scope.isSameDay = function (date) {
                    return isSameDay(scope.model, date);
                };

                scope.isSameHour = function (date) {
                    return isSameHour(scope.model, date);
                };

                scope.isSameMinutes = function (date) {
                    return isSameMinutes(scope.model, date);
                };

                scope.isNow = function (date) {
                    var is = true;
                    var now = scope.now;
                    //noinspection FallThroughInSwitchStatementJS
                    switch (scope.view) {
                        case 'minutes':
                            is &= ~~(date.getMinutes()/step) === ~~(now.getMinutes()/step);
                        /*falls through*/
                        case 'hours':
                            is &= date.getHours() === now.getHours();
                        /*falls through*/
                        case 'date':
                            is &= date.getDate() === now.getDate();
                        /*falls through*/
                        case 'month':
                            is &= date.getMonth() === now.getMonth();
                        /*falls through*/
                        case 'year':
                            is &= date.getFullYear() === now.getFullYear();
                    }
                    return is;
                };
            }
        };
    }]);

    'use strict';

    var Module = angular.module('datePicker');

    Module.directive('dateRange', function () {
        return {
            templateUrl: 'templates/daterange.html',
            scope: {
                start: '=',
                end: '='
            },
            link: function (scope, element, attrs) {
                attrs.$observe('disabled', function(isDisabled){
                    scope.disableDatePickers = !!isDisabled;
                });
                scope.$watch('start.getTime()', function (value) {
                    if (value && scope.end && value > scope.end.getTime()) {
                        scope.end = new Date(value);
                    }
                });
                scope.$watch('end.getTime()', function (value) {
                    if (value && scope.start && value < scope.start.getTime()) {
                        scope.start = new Date(value);
                    }
                });
            }
        };
    });

    'use strict';

    var PRISTINE_CLASS = 'ng-pristine',
        DIRTY_CLASS = 'ng-dirty';

    var Module = angular.module('datePicker');

    Module.constant('dateTimeConfig', {
        template: function (attrs) {
            return '' +
                '<div ' +
                'date-picker="' + attrs.ngModel + '" ' +
                (attrs.view ? 'view="' + attrs.view + '" ' : '') +
                (attrs.maxView ? 'max-view="' + attrs.maxView + '" ' : '') +
                (attrs.template ? 'template="' + attrs.template + '" ' : '') +
                (attrs.minView ? 'min-view="' + attrs.minView + '" ' : '') +
                (attrs.partial ? 'partial="' + attrs.partial + '" ' : '') +
                'class="dropdown-menu"></div>';
        },
        format: 'yyyy-MM-dd HH:mm',
        views: ['date', 'year', 'month', 'hours', 'minutes'],
        dismiss: false,
        position: 'relative'
    });

    Module.directive('dateTimeAppend', function () {
        return {
            link: function (scope, element) {
                element.bind('click', function () {
                    element.find('input')[0].focus();
                });
            }
        };
    });

    Module.directive('dateTime', ['$compile', '$document', '$filter', 'dateTimeConfig', '$parse', function ($compile, $document, $filter, dateTimeConfig, $parse) {
        var body = $document.find('body');
        var dateFilter = $filter('date');

        return {
            require: 'ngModel',
            scope:true,
            link: function (scope, element, attrs, ngModel) {
                var format = attrs.format || dateTimeConfig.format;
                var parentForm = element.inheritedData('$formController');
                var views = $parse(attrs.views)(scope) || dateTimeConfig.views.concat();
                var view = attrs.view || views[0];
                var index = views.indexOf(view);
                var dismiss = attrs.dismiss ? $parse(attrs.dismiss)(scope) : dateTimeConfig.dismiss;
                var picker = null;
                var position = attrs.position || dateTimeConfig.position;
                var container = null;

                if (index === -1) {
                    views.splice(index, 1);
                }

                views.unshift(view);


                function formatter(value) {
                    return dateFilter(value, format);
                }

                function parser() {
                    return ngModel.$modelValue;
                }

                ngModel.$formatters.push(formatter);
                ngModel.$parsers.unshift(parser);


                var template = dateTimeConfig.template(attrs);

                function updateInput(event) {
                    event.stopPropagation();
                    if (ngModel.$pristine) {
                        ngModel.$dirty = true;
                        ngModel.$pristine = false;
                        element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);
                        if (parentForm) {
                            parentForm.$setDirty();
                        }
                        ngModel.$render();
                    }
                }

                function clear() {
                    if (picker) {
                        picker.remove();
                        picker = null;
                    }
                    if (container) {
                        container.remove();
                        container = null;
                    }
                }

                function showPicker() {
                    if (picker) {
                        return;
                    }
                    // create picker element
                    picker = $compile(template)(scope);
                    scope.$digest();

                    scope.$on('setDate', function (event, date, view) {
                        updateInput(event);
                        if (dismiss && views[views.length - 1] === view) {
                            clear();
                        }
                    });

                    scope.$on('$destroy', clear);

                    // move picker below input element

                    if (position === 'absolute') {
                        var pos = angular.extend(element.offset(), { height: element[0].offsetHeight });
                        picker.css({ top: pos.top + pos.height, left: pos.left, display: 'block', position: position});
                        body.append(picker);
                    } else {
                        // relative
                        container = angular.element('<div date-picker-wrapper></div>');
                        element[0].parentElement.insertBefore(container[0], element[0]);
                        container.append(picker);
//          this approach doesn't work
//          element.before(picker);
                        picker.css({top: element[0].offsetHeight + 'px', display: 'block'});
                    }

                    picker.bind('mousedown', function (evt) {
                        evt.preventDefault();
                    });
                }

                element.bind('focus', showPicker);
                element.bind('blur', clear);
            }
        };
    }]);

    angular.module("datePicker").run(["$templateCache", function($templateCache) {

        $templateCache.put("templates/datepicker.html",
            "<div ng-switch=\"view\">\r" +
                "\n" +
                "  <div ng-switch-when=\"date\">\r" +
                "\n" +
                "    <table>\r" +
                "\n" +
                "      <thead>\r" +
                "\n" +
                "      <tr>\r" +
                "\n" +
                "        <th ng-click=\"prev()\">‹</th>\r" +
                "\n" +
                "        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('month')\">{{date|date:\"yyyy MMMM\"}}</th>\r" +
                "\n" +
                "        <th ng-click=\"next()\">›</i></th>\r" +
                "\n" +
                "      </tr>\r" +
                "\n" +
                "      <tr>\r" +
                "\n" +
                "        <th ng-repeat=\"day in weekdays\" style=\"overflow: hidden\">{{ day|date:\"EEE\" }}</th>\r" +
                "\n" +
                "      </tr>\r" +
                "\n" +
                "      </thead>\r" +
                "\n" +
                "      <tbody>\r" +
                "\n" +
                "      <tr ng-repeat=\"week in weeks\">\r" +
                "\n" +
                "        <td ng-repeat=\"day in week\">\r" +
                "\n" +
                "          <span\r" +
                "\n" +
                "            ng-class=\"{'now':isNow(day),'active':isSameDay(day),'disabled':(day.getMonth()!=date.getMonth()),'after':isAfter(day),'before':isBefore(day)}\"\r" +
                "\n" +
                "            ng-click=\"setDate(day)\" ng-bind=\"day.getDate()\"></span>\r" +
                "\n" +
                "        </td>\r" +
                "\n" +
                "      </tr>\r" +
                "\n" +
                "      </tbody>\r" +
                "\n" +
                "    </table>\r" +
                "\n" +
                "  </div>\r" +
                "\n" +
                "  <div ng-switch-when=\"year\">\r" +
                "\n" +
                "    <table>\r" +
                "\n" +
                "      <thead>\r" +
                "\n" +
                "      <tr>\r" +
                "\n" +
                "        <th ng-click=\"prev(10)\">‹</th>\r" +
                "\n" +
                "        <th colspan=\"5\" class=\"switch\">{{years[0].getFullYear()}}-{{years[years.length-1].getFullYear()}}</th>\r" +
                "\n" +
                "        <th ng-click=\"next(10)\">›</i></th>\r" +
                "\n" +
                "      </tr>\r" +
                "\n" +
                "      </thead>\r" +
                "\n" +
                "      <tbody>\r" +
                "\n" +
                "      <tr>\r" +
                "\n" +
                "        <td colspan=\"7\">\r" +
                "\n" +
                "          <span ng-class=\"{'active':isSameYear(year),'now':isNow(year)}\"\r" +
                "\n" +
                "                ng-repeat=\"year in years\"\r" +
                "\n" +
                "                ng-click=\"setDate(year)\" ng-bind=\"year.getFullYear()\"></span>\r" +
                "\n" +
                "        </td>\r" +
                "\n" +
                "      </tr>\r" +
                "\n" +
                "      </tbody>\r" +
                "\n" +
                "    </table>\r" +
                "\n" +
                "  </div>\r" +
                "\n" +
                "  <div ng-switch-when=\"month\">\r" +
                "\n" +
                "    <table>\r" +
                "\n" +
                "      <thead>\r" +
                "\n" +
                "      <tr>\r" +
                "\n" +
                "        <th ng-click=\"prev()\">‹</th>\r" +
                "\n" +
                "        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('year')\">{{ date|date:\"yyyy\" }}</th>\r" +
                "\n" +
                "        <th ng-click=\"next()\">›</i></th>\r" +
                "\n" +
                "      </tr>\r" +
                "\n" +
                "      </thead>\r" +
                "\n" +
                "      <tbody>\r" +
                "\n" +
                "      <tr>\r" +
                "\n" +
                "        <td colspan=\"7\">\r" +
                "\n" +
                "          <span ng-repeat=\"month in months\"\r" +
                "\n" +
                "                ng-class=\"{'active':isSameMonth(month),'after':isAfter(month),'before':isBefore(month),'now':isNow(month)}\"\r" +
                "\n" +
                "                ng-click=\"setDate(month)\"\r" +
                "\n" +
                "                ng-bind=\"month|date:'MMM'\"></span>\r" +
                "\n" +
                "        </td>\r" +
                "\n" +
                "      </tr>\r" +
                "\n" +
                "      </tbody>\r" +
                "\n" +
                "    </table>\r" +
                "\n" +
                "  </div>\r" +
                "\n" +
                "  <div ng-switch-when=\"hours\">\r" +
                "\n" +
                "    <table>\r" +
                "\n" +
                "      <thead>\r" +
                "\n" +
                "      <tr>\r" +
                "\n" +
                "        <th ng-click=\"prev(24)\">‹</th>\r" +
                "\n" +
                "        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('date')\">{{ date|date:\"dd MMMM yyyy\" }}</th>\r" +
                "\n" +
                "        <th ng-click=\"next(24)\">›</i></th>\r" +
                "\n" +
                "      </tr>\r" +
                "\n" +
                "      </thead>\r" +
                "\n" +
                "      <tbody>\r" +
                "\n" +
                "      <tr>\r" +
                "\n" +
                "        <td colspan=\"7\">\r" +
                "\n" +
                "          <span ng-repeat=\"hour in hours\"\r" +
                "\n" +
                "                ng-class=\"{'now':isNow(hour),'active':isSameHour(hour)}\"\r" +
                "\n" +
                "                ng-click=\"setDate(hour)\" ng-bind=\"hour|time\"></span>\r" +
                "\n" +
                "        </td>\r" +
                "\n" +
                "      </tr>\r" +
                "\n" +
                "      </tbody>\r" +
                "\n" +
                "    </table>\r" +
                "\n" +
                "  </div>\r" +
                "\n" +
                "  <div ng-switch-when=\"minutes\">\r" +
                "\n" +
                "    <table>\r" +
                "\n" +
                "      <thead>\r" +
                "\n" +
                "      <tr>\r" +
                "\n" +
                "        <th ng-click=\"prev()\">‹</th>\r" +
                "\n" +
                "        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('hours')\">{{ date|date:\"dd MMMM yyyy\" }}\r" +
                "\n" +
                "        </th>\r" +
                "\n" +
                "        <th ng-click=\"next()\">›</i></th>\r" +
                "\n" +
                "      </tr>\r" +
                "\n" +
                "      </thead>\r" +
                "\n" +
                "      <tbody>\r" +
                "\n" +
                "      <tr>\r" +
                "\n" +
                "        <td colspan=\"7\">\r" +
                "\n" +
                "          <span ng-repeat=\"minute in minutes\"\r" +
                "\n" +
                "                ng-class=\"{active:isSameMinutes(minute),'now':isNow(minute)}\"\r" +
                "\n" +
                "                ng-click=\"setDate(minute)\"\r" +
                "\n" +
                "                ng-bind=\"minute|time\"></span>\r" +
                "\n" +
                "        </td>\r" +
                "\n" +
                "      </tr>\r" +
                "\n" +
                "      </tbody>\r" +
                "\n" +
                "    </table>\r" +
                "\n" +
                "  </div>\r" +
                "\n" +
                "</div>\r" +
                "\n"
        );

        $templateCache.put("templates/daterange.html",
            "<div>\r" +
                "\n" +
                "    <table>\r" +
                "\n" +
                "        <tr>\r" +
                "\n" +
                "            <td valign=\"top\">\r" +
                "\n" +
                "                <div date-picker=\"start\" ng-disabled=\"disableDatePickers\"  class=\"date-picker\" date after=\"start\" before=\"end\" min-view=\"date\" max-view=\"date\"></div>\r" +
                "\n" +
                "            </td>\r" +
                "\n" +
                "            <td valign=\"top\">\r" +
                "\n" +
                "                <div date-picker=\"end\" ng-disabled=\"disableDatePickers\"  class=\"date-picker\" date after=\"start\" before=\"end\"  min-view=\"date\" max-view=\"date\"></div>\r" +
                "\n" +
                "            </td>\r" +
                "\n" +
                "        </tr>\r" +
                "\n" +
                "    </table>\r" +
                "\n" +
                "</div>\r" +
                "\n"
        );

    }]);
})(angular);
'use strict';

angular.module('datePicker').factory('datePickerUtils', function(){
    return {
        getVisibleMinutes : function(date, step) {
            date = new Date(date || new Date());
            date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours());
            var minutes = [];
            var stop = date.getTime() + 60 * 60 * 1000;
            while (date.getTime() < stop) {
                minutes.push(date);
                date = new Date(date.getTime() + step * 60 * 1000);
            }
            return minutes;
        },
        getVisibleWeeks : function(date) {
            date = new Date(date || new Date());
            var startMonth = date.getMonth(), startYear = date.getYear();
            date.setDate(1);
            date.setHours(0);
            date.setMinutes(0);
            date.setSeconds(0);
            date.setMilliseconds(0);

            if (date.getDay() === 0) {
                date.setDate(-5);
            } else {
                date.setDate(date.getDate() - (date.getDay() - 1));
            }
            if (date.getDate() === 1) {
                date.setDate(-6);
            }

            var weeks = [];
            while (weeks.length < 6) {
                /*jshint -W116 */
                if(date.getYear()=== startYear && date.getMonth() > startMonth) break;
                var week = [];
                for (var i = 0; i < 7; i++) {
                    week.push(new Date(date));
                    date.setDate(date.getDate() + 1);
                }
                weeks.push(week);
            }
            return weeks;
        },
        getVisibleYears : function(date) {
            var years = [];
            date = new Date(date || new Date());
            date.setFullYear(date.getFullYear() - (date.getFullYear() % 10));
            for (var i = 0; i < 12; i++) {
                years.push(new Date(date.getFullYear() + (i - 1), 0, 1));
            }
            return years;
        },
        getDaysOfWeek : function(date) {
            date = new Date(date || new Date());
            date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
            date.setDate(date.getDate() - (date.getDay() - 1));
            var days = [];
            for (var i = 0; i < 7; i++) {
                days.push(new Date(date));
                date.setDate(date.getDate() + 1);
            }
            return days;
        },
        getVisibleMonths : function(date) {
            date = new Date(date || new Date());
            var year = date.getFullYear();
            var months = [];
            for (var month = 0; month < 12; month++) {
                months.push(new Date(year, month, 1));
            }
            return months;
        },
        getVisibleHours : function(date) {
            date = new Date(date || new Date());
            date.setHours(0);
            date.setMinutes(0);
            date.setSeconds(0);
            date.setMilliseconds(0);
            var hours = [];
            for (var i = 0; i < 24; i++) {
                hours.push(date);
                date = new Date(date.getTime() + 60 * 60 * 1000);
            }
            return hours;
        },
        isAfter : function(model, date) {
            return model && model.getTime() <= date.getTime();
        },
        isBefore : function(model, date) {
            return model.getTime() >= date.getTime();
        },
        isSameYear :   function(model, date) {
            return model && model.getFullYear() === date.getFullYear();
        },
        isSameMonth : function(model, date) {
            return this.isSameYear(model, date) && model.getMonth() === date.getMonth();
        },
        isSameDay : function(model, date) {
            return this.isSameMonth(model, date) && model.getDate() === date.getDate();
        },
        isSameHour : function(model, date) {
            return this.isSameDay(model, date) && model.getHours() === date.getHours();
        },
        isSameMinutes : function(model, date) {
            return this.isSameHour(model, date) && model.getMinutes() === date.getMinutes();
        }
    };
});
'use strict';

var Module = angular.module('datePicker');

Module.directive('dateRange', function () {
    return {
        templateUrl: 'templates/daterange.html',
        scope: {
            start: '=',
            end: '='
        },
        link: function (scope, element, attrs) {
            attrs.$observe('disabled', function(isDisabled){
                scope.disableDatePickers = !!isDisabled;
            });
            scope.$watch('start.getTime()', function (value) {
                if (value && scope.end && value > scope.end.getTime()) {
                    scope.end = new Date(value);
                }
            });
            scope.$watch('end.getTime()', function (value) {
                if (value && scope.start && value < scope.start.getTime()) {
                    scope.start = new Date(value);
                }
            });
        }
    };
});
'use strict';

var PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty';

var Module = angular.module('datePicker');

Module.constant('dateTimeConfig', {
    template: function (attrs) {
        return '' +
            '<div ' +
            'date-picker="' + attrs.ngModel + '" ' +
            (attrs.view ? 'view="' + attrs.view + '" ' : '') +
            (attrs.maxView ? 'max-view="' + attrs.maxView + '" ' : '') +
            (attrs.template ? 'template="' + attrs.template + '" ' : '') +
            (attrs.minView ? 'min-view="' + attrs.minView + '" ' : '') +
            (attrs.partial ? 'partial="' + attrs.partial + '" ' : '') +
            'class="dropdown-menu"></div>';
    },
    format: 'yyyy-MM-dd HH:mm',
    views: ['date', 'year', 'month', 'hours', 'minutes'],
    dismiss: false,
    position: 'relative'
});

Module.directive('dateTimeAppend', function () {
    return {
        link: function (scope, element) {
            element.bind('click', function () {
                element.find('input')[0].focus();
            });
        }
    };
});

Module.directive('dateTime', ['$compile', '$document', '$filter', 'dateTimeConfig', '$parse', function ($compile, $document, $filter, dateTimeConfig, $parse) {
    var body = $document.find('body');
    var dateFilter = $filter('date');

    return {
        require: 'ngModel',
        scope:true,
        link: function (scope, element, attrs, ngModel) {
            var format = attrs.format || dateTimeConfig.format;
            var parentForm = element.inheritedData('$formController');
            var views = $parse(attrs.views)(scope) || dateTimeConfig.views.concat();
            var view = attrs.view || views[0];
            var index = views.indexOf(view);
            var dismiss = attrs.dismiss ? $parse(attrs.dismiss)(scope) : dateTimeConfig.dismiss;
            var picker = null;
            var position = attrs.position || dateTimeConfig.position;
            var container = null;

            if (index === -1) {
                views.splice(index, 1);
            }

            views.unshift(view);


            function formatter(value) {
                return dateFilter(value, format);
            }

            function parser() {
                return ngModel.$modelValue;
            }

            ngModel.$formatters.push(formatter);
            ngModel.$parsers.unshift(parser);


            var template = dateTimeConfig.template(attrs);

            function updateInput(event) {
                event.stopPropagation();
                if (ngModel.$pristine) {
                    ngModel.$dirty = true;
                    ngModel.$pristine = false;
                    element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);
                    if (parentForm) {
                        parentForm.$setDirty();
                    }
                    ngModel.$render();
                }
            }

            function clear() {
                if (picker) {
                    picker.remove();
                    picker = null;
                }
                if (container) {
                    container.remove();
                    container = null;
                }
            }

            function showPicker() {
                if (picker) {
                    return;
                }
                // create picker element
                picker = $compile(template)(scope);
                scope.$digest();

                scope.$on('setDate', function (event, date, view) {
                    updateInput(event);
                    if (dismiss && views[views.length - 1] === view) {
                        clear();
                    }
                });

                scope.$on('$destroy', clear);

                // move picker below input element

                if (position === 'absolute') {
                    var pos = angular.extend(element.offset(), { height: element[0].offsetHeight });
                    picker.css({ top: pos.top + pos.height, left: pos.left, display: 'block', position: position});
                    body.append(picker);
                } else {
                    // relative
                    container = angular.element('<div date-picker-wrapper></div>');
                    element[0].parentElement.insertBefore(container[0], element[0]);
                    container.append(picker);
//          this approach doesn't work
//          element.before(picker);
                    picker.css({top: element[0].offsetHeight + 'px', display: 'block'});
                }

                picker.bind('mousedown', function (evt) {
                    evt.preventDefault();
                });
            }

            element.bind('focus', showPicker);
            element.bind('blur', clear);
        }
    };
}]);
/**
 * notosplus.widgets
 * DIRECTIVE: ntFa
 */
(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .directive('ntFa', ntFa);

    ntFa.$inject = [];

    function ntFa() {
        var directive = {
            restrict: 'E',
            link: linkFunc
        };

        return directive;
        //////////////////////

        function linkFunc(scope, element, attrs) {
            var i = angular.element('<i class="fa" />');
            var classes = attrs.name.split(' ');

            angular.forEach(classes, function (value) {
                i.addClass('fa-' + value);
            });

            element.replaceWith(i);
        }
    }
})();


/**
 * notosplus.widgets
 * DIRECTIVE: ntSpinner
 */
(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .directive('ntSpinner', ntSpinner);

    /* @ngInject */
    function ntSpinner() {
        var directive = {
            restrict: 'EA',
            compile: compile
        };

        return directive;
        //////////////////////
        function compile(elem, attrs) {
            if (elem[0].tagName === 'TABLE') {
                addSpinnerToTBody(elem, attrs);
            } else {
                addSpinnerToElement(elem, attrs);
            }
        }

        function addSpinnerToTBody(element, attrs) {
            var tbody = element.find('tbody');
            var html = ['<tr ng-show="' + attrs.spinnerShow + '">',
                            '<td ',
                                (attrs.hasOwnProperty('colspan') ? 'colspan="' + attrs.colspan + '" ' : ''),
                            ' style="text-align:center">',
                                '<img src="/img/busy/busyatom.gif" style="width:40px;height:40px;">',
                            '</td>',
                        '</tr>'].join('');

            tbody.prepend(html);
        }
        function addSpinnerToElement(element, attrs) {
            var html = ['<div ng-show="' + attrs.spinnerShow + '" class="col-md-12 text-center">',
                    '<img src="/img/busy/busyatom.gif" style="width:40px;height:40px;">',
                '</div>',
                '<div class="clearfix"></div>'].join('');

            element.prepend(html);
        }
    }
})();


/**
 * notosplus.widgets
 * FACTORY: spinnerService
 */

(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .factory('spinnerService', spinnerService);

    /* @ngInject */
    function spinnerService() {
        var spinners = {};
        var service = {
            _register: register,
            _unregister: unregister,
            _unregisterAll: unregisterAll,
            show: show,
            hide: hide,
            showGroup: showGroup,
            hideGroup: hideGroup,
            showAll: showAll,
            hideAll: hideAll
        }

        return service;
        //////////////
        function register(data) {
            if(!data.hasOwnProperty('name')) {
                throw new Error('Spinner must specify a name when registering with the spinner service.');
            }
            if(spinners.hasOwnProperty(data.name)) {
                throw new Error('A spinner with the name "' + data.name + '" has already been registered.');
            }
            spinners[data.name] = data;
        }

        function unregister(name) {
            if(spinners.hasOwnProperty(name)) {
                delete spinners[name];
            }
        }

        function unregisterAll() {
            for(var name in spinners) {
                delete spinners[name];
            }
        }

        function show(name) {
            var spinner  = spinners[name];
            if(!spinner) {
                throw  new Error('No spinner named "' + name + '" is registered.');
            }
            spinner.show();
        }

        function hide(name) {
            var spinner  = spinners[name];
            if(!spinner) {
                throw  new Error('No spinner named "' + name + '" is registered.');
            }
            spinner.hide();
        }

        function showGroup(group) {
            var groupExists = false;
            for(var name in spinners) {
                var spinner = spinners[name];
                if(spinner.group === group) {
                    spinner.show();
                    groupExists = true;
                }
            }
            if(!groupExists) {
                throw new Error('No spinners found with group "' + group + '".');
            }
        }
        function hideGroup(group) {
            var groupExists = false;
            for(var name in spinners) {
                var spinner = spinners[name];
                if(spinner.group === group) {
                    spinner.hide();
                    groupExists = true;
                }
            }
            if(!groupExists) {
                throw new Error('No spinners found with group "' + group + '".');
            }
        }
        function showAll() {
            for(var name in spinners) {
                spinners[name].show();
            }
        }
        function hideAll() {
            for(var name in spinners) {
                spinners[name].hide();
            }
        }
    }
})();
/**
 * notosplus.widgets
 * DIRECTIVE: ntMiniSideBar
 */
(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .directive('ntMiniSidebar', ntMiniSidebar);

    function ntMiniSidebar() {
        var directive = {
            restrict: 'A',
            template: [
                '<a class="navbar-minimalize minimalize-styl-2 btn btn-primary" href="" ng-click="vm.minimalize()">',
                '<i class="fa fa-bars"></i>',
                '</a>'
            ].join(''),

            controller: MinimizeController,
            controllerAs: 'vm',
            bindToController: true // because the scope is isolated
        };

        MinimizeController.$inject = ["$timeout"];
        return directive;
        //////////////////////

        /* @ngInject */
        function MinimizeController($timeout) {
            var vm = this;
            vm.minimalize = minimalize;

            //////////////////////////////////
            function minimalize() {
                angular.element('body').toggleClass('mini-navbar');
                if (!angular.element('body').hasClass('mini-navbar') || angular.element('body').hasClass('body-small')) {
                    // Hide menu in order to smoothly turn on when maximize menu
                    angular.element('#side-menu').hide();
                    // For smoothly turn on menu
                    $timeout(
                        function () {
                            angular.element('#side-menu').fadeIn(500);
                        }, 100);
                } else if (angular.element('body').hasClass('fixed-sidebar')) {
                    angular.element('#side-menu').hide();
                    $timeout(
                        function () {
                            angular.element('#side-menu').fadeIn(500);
                        }, 300);
                } else {
                    // Remove all inline style from jquery fadeIn function to reset menu state
                    angular.element('#side-menu').removeAttr('style');
                }
            }
        }
    }
})();


/**
 * notosplus.widgets
 * DIRECTIVE: ntPagination
 */
(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .directive('ntPagination', ntPagination);

    /* @ngInject */
    function ntPagination($compile) {
        var directive = {
            restrict: 'EA',
            scope: {
                totalItems: '=',
                itemsPerPage: '=',
                currentPage: '='
            },
            link: linkFunc,
            controller: PaginateController,
            controllerAs: 'vm',
            bindToController: true // because the scope is isolated
        };

        PaginateController.$inject = ["$scope"];
        return directive;
        //////////////////////

        function linkFunc(scope, element, attrs) {
            var pagination = angular.element('<pagination />')
            pagination.attr('data-boundary-links', true);
            pagination.attr('data-total-items', 'totalItems');
            pagination.attr('data-items-per-page', 'itemsPerPage');
            pagination.attr('data-max-size', 5);
            pagination.attr('data-ng-model', 'currentPage');
            pagination.attr('data-previous-text', '‹');
            pagination.attr('data-next-text', '›');
            pagination.attr('data-first-text', '«');
            pagination.attr('data-last-text', '»');
            pagination.attr('data-ng-hide', 'hide');
            if (attrs['class']) {
                pagination.attr('class', attrs['class']);
            }

            $compile(pagination)(scope);
            element.replaceWith(pagination);
        }

        /* @ngInject */
        function PaginateController($scope) {
            var vm = this;

            vm.hide = false;
            vm.itemsPerPage = 10;
            vm.currentPge = 0;

            $scope.$watch('vm.totalItems', function () {
                vm.hide = (vm.totalItems <= vm.itemsPerPage);
            });
        }
    }
    ntPagination.$inject = ["$compile"];
})();


/**
 * notosplus
 * DIRECTIVE: ntSideNavigation
 */
(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .directive('ntSideNavigation', ntSideNavigation);

    /* @ngInject */
    function ntSideNavigation($timeout) {
        var directive = {
            restrict: 'EA',
            link: linkFunc
        };

        return directive;
        //////////////////////

        function linkFunc(scope, element) {
            $timeout(function () {
                $(element).metisMenu();
            })
        };
    }
    ntSideNavigation.$inject = ["$timeout"];
})();


/**
 * notosplus.widgets
 * FILTER: offset
 */
(function () {
    'use strict';

    angular
        .module('notosplus.widgets')
        .filter('offset', filter);


    function filter() {
        return function offset(input, start) {
            if (input) {
                start = parseInt(start, 10);
                return input.slice(start);
            }
            return [];
        };
    }
})();